labs(title = "Figure 7d: Network bins")
ggplot(complex_df, aes(x = Complex, y = Symbol, fill = PTM)) +
geom_bin_2d() +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1),
axis.title.x = element_blank(), axis.title.y = element_blank()) +
paletteer::scale_fill_paletteer_d("ggsci::default_igv") +
scale_y_discrete(limits = rev) +
labs(title = "Figure 7d: Network bins")
ggplot(network_df, aes(x = Complex, y = Symbol, fill = PTM)) +
geom_bin_2d() +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1),
axis.title.x = element_blank(), axis.title.y = element_blank()) +
paletteer::scale_fill_paletteer_d("ggsci::default_igv") +
scale_y_discrete(limits = rev) +
labs(title = "Figure 7d: Network bins")
with_id <- filter(network_df, Complex != "No ID")
sig_network <- distinct(group_by(with_id, Complex), vertices, .keep_all = TRUE)
sig_network <- distinct(group_by(with_id, Complex), Symbol, .keep_all = TRUE)
with_id <- filter(network_df, Complex != "No ID")
sig_network <- distinct(group_by(with_id, Complex), Symbol, .keep_all = TRUE)
sig_network["weight"] <- 1
sig_network$Complex <- factor(sig_network$Complex, levels = unique(as.character(sig_network$Complex)))
ggplot(sig_network, aes(x = Complex, y = weight)) +
geom_col(aes(fill = Complex), position = "stack", width = 0.7) +
geom_label(aes(label = Symbol, angle = 30), size = rel(2),
position = position_stack(vjust = 0.5)) +
guides(fill = "none") +
theme(axis.text.x = element_text(angle = 30, vjust = 1, hjust=1),
axis.title.x = element_blank(), axis.title.y = element_blank(),
plot.margin = margin(t = 10, r = 10, b = 10, l = 10)) +
labs(title = "Figure 7c: Network components")
ggplot(network_df, aes(x = Complex, y = Symbol, fill = PTM)) +
geom_bin_2d() +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1),
axis.title.x = element_blank(), axis.title.y = element_blank()) +
paletteer::scale_fill_paletteer_d("ggsci::default_igv") +
scale_y_discrete(limits = rev) +
labs(title = "Figure 7d: Network bins")
ggplot(sig_network, aes(x = Complex, y = Symbol, fill = PTM)) +
geom_bin_2d() +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1),
axis.title.x = element_blank(), axis.title.y = element_blank()) +
paletteer::scale_fill_paletteer_d("ggsci::default_igv") +
scale_y_discrete(limits = rev) +
labs(title = "Figure 7d: Network bins")
complex_vert_attr$Shapes<- case_when(complex_vert_attr$Diff == "Up" ~ "triangle",
complex_vert_attr$Diff == "Down" ~ "triangleDown")
sig_network_py <- r_to_py(complex_vert_attr)
reticulate::repl_python()
network_df$Shapes<- case_when(network_df$Diff == "Up" ~ "triangle",
network_df$Diff == "Down" ~ "triangleDown")
sig_network_py <- r_to_py(network_df)
reticulate::repl_python()
htmltools::renderDocument(htmltools::htmlTemplate("networkx-pyvis.html"))
reticulate::repl_python()
complex_graph <- graph_from_data_frame(d = network_df, vertices = complex_vert_attr, directed = FALSE)
plot(complex_graph)
network_df$Shapes<- case_when(network_df$Diff == "Up" ~ "triangle",
network_df$Diff == "Down" ~ "triangleDown")
sig_network_py <- r_to_py(network_df)
reticulate::repl_python()
View(sig_network_py)
reticulate::repl_python()
htmltools::renderDocument(htmltools::htmlTemplate("networkx-pyvis.html"))
complex_vertices <- data.frame(vertices = c(unique(genes_histone_joined$Symbol), unique(genes_histone_joined$PTM)))
View(complex_vertices)
complexes <- unique(genes_histone_joined$Complex)
n_complexes <- seq(1, length(complexes))
color_opts <- c("#FFFFFF", qualpalr::qualpal(n = (length(complexes) - 1), colorspace = "rainbow")$hex)
complex_df <- data.frame(complexes, n_complexes, color = color_opts)
complex_vertices <- data.frame(vertices = c(unique(genes_histone_joined$Symbol), unique(genes_histone_joined$PTM)))
network_df <- full_join(genes_histone_joined, complex_df, by = join_by("Complex" == "complexes")) %>% relocate(c("Symbol", "PTM"))
network_df$Symbol <- case_when(is.na(network_df$Symbol) ~ network_df$PTM,
.default = network_df$Symbol)
network_df$Source <- case_when(is.na(network_df$Source) ~ "Histone",
.default = network_df$Source)
network_df$Diff <- case_when(network_df$Source == "Histone" ~ network_df$Diff_hist,
.default = network_df$Diff_gene)
#network_df <- drop_na(network_df, Diff)
complex_vert_attr <- left_join(complex_vertices, network_df, by = join_by("vertices" == "Symbol"), multiple = "all") %>% dplyr::select(c("vertices", "Complex", "Source", "Diff")) %>% distinct(vertices, .keep_all = TRUE) %>% drop_na(vertices)
complex_graph <- graph_from_data_frame(d = network_df, vertices = complex_vert_attr, directed = FALSE)
complex_vert_attr <- left_join(complex_vertices, network_df, by = join_by("vertices" == "Symbol"), multiple = "all") %>% dplyr::select(c("vertices", "Complex", "PTM", "Source", "Diff")) %>% distinct(vertices, .keep_all = TRUE) %>% drop_na(vertices)
complex_graph <- graph_from_data_frame(d = network_df, vertices = complex_vert_attr, directed = FALSE)
network_df$Shapes<- case_when(network_df$Diff == "Up" ~ "triangle",
network_df$Diff == "Down" ~ "triangleDown")
sig_network_py <- r_to_py(network_df)
reticulate::repl_python()
htmltools::renderDocument(htmltools::htmlTemplate("networkx-pyvis.html"))
complex_vert_attr$Shapes<- case_when(complex_vert_attr$Diff == "Up" ~ "triangle",
complex_vert_attr$Diff == "Down" ~ "triangleDown")
sig_network_py <- r_to_py(complex_vert_attr)
reticulate::repl_python()
View(sig_network_py)
complexes <- unique(genes_histone_joined$Complex)
n_complexes <- seq(1, length(complexes))
color_opts <- c("#FFFFFF", qualpalr::qualpal(n = (length(complexes) - 1), colorspace = "rainbow")$hex)
complex_df <- data.frame(complexes, n_complexes, color = color_opts)
complex_vertices <- data.frame(vertices = c(unique(genes_histone_joined$Symbol), unique(genes_histone_joined$PTM)))
network_df <- full_join(genes_histone_joined, complex_df, by = join_by("Complex" == "complexes")) %>% relocate(c("Symbol", "PTM"))
network_df$Symbol <- case_when(is.na(network_df$Symbol) ~ network_df$PTM,
.default = network_df$Symbol)
network_df$Source <- case_when(is.na(network_df$Source) ~ "Histone",
.default = network_df$Source)
network_df$Diff <- case_when(network_df$Source == "Histone" ~ network_df$Diff_hist,
.default = network_df$Diff_gene)
#network_df <- drop_na(network_df, Diff)
complex_vert_attr <- left_join(complex_vertices, network_df, by = join_by("vertices" == "Symbol"), multiple = "all") %>% dplyr::select(c("vertices", "Complex", "PTM", "Source", "Diff")) %>% distinct(vertices, .keep_all = TRUE) %>% drop_na(vertices)
complex_graph <- graph_from_data_frame(d = network_df, vertices = complex_vert_attr, directed = FALSE)
complex_vert_attr <- right_join(complex_vertices, network_df, by = join_by("vertices" == "Symbol"), multiple = "all") %>% dplyr::select(c("vertices", "Complex", "PTM", "Source", "Diff")) %>% distinct(vertices, .keep_all = TRUE) %>% drop_na(vertices)
complex_vert_attr <- left_join(complex_vertices, network_df, by = join_by("vertices" == "Symbol", "vertices" == "PTM"), multiple = "all") %>% dplyr::select(c("vertices", "Complex", "PTM", "Source", "Diff")) %>% distinct(vertices, .keep_all = TRUE) %>% drop_na(vertices)
complex_vert_attr <- right_join(complex_vertices, network_df, by = join_by("vertices" == "Symbol", "vertices" == "PTM"), multiple = "all") %>% dplyr::select(c("vertices", "Complex", "PTM", "Source", "Diff")) %>% distinct(vertices, .keep_all = TRUE) %>% drop_na(vertices)
View(genes_histone_pivoted)
View(genes_histone_joined)
complex_df2 <- full_join(complex_vertices, network_df)
complex_df2 <- left_join(complex_vertices, network_df$Symbol)
complex_df2 <- left_join(complex_vertices, network_df, by = join_by("vertices" == "Symbol"))
View(complex_df2)
network_df <- left_join(complex_vertices, network_df, by = join_by("vertices" == "Symbol"))
complexes <- unique(genes_histone_joined$Complex)
n_complexes <- seq(1, length(complexes))
color_opts <- c("#FFFFFF", qualpalr::qualpal(n = (length(complexes) - 1), colorspace = "rainbow")$hex)
complex_df <- data.frame(complexes, n_complexes, color = color_opts)
complex_vertices <- data.frame(vertices = c(unique(genes_histone_joined$Symbol), unique(genes_histone_joined$PTM)))
network_df <- full_join(genes_histone_joined, complex_df, by = join_by("Complex" == "complexes")) %>% relocate(c("Symbol", "PTM"))
network_df <- left_join(complex_vertices, network_df, by = join_by("vertices" == "Symbol"))
network_df$Symbol <- case_when(is.na(network_df$Symbol) ~ network_df$PTM,
.default = network_df$Symbol)
network_df <- left_join(complex_vertices, network_df, by = join_by("vertices" == "Symbol")) %>% rename("vertices" = "Symbol")
complexes <- unique(genes_histone_joined$Complex)
n_complexes <- seq(1, length(complexes))
color_opts <- c("#FFFFFF", qualpalr::qualpal(n = (length(complexes) - 1), colorspace = "rainbow")$hex)
complex_df <- data.frame(complexes, n_complexes, color = color_opts)
complex_vertices <- data.frame(vertices = c(unique(genes_histone_joined$Symbol), unique(genes_histone_joined$PTM)))
network_df <- full_join(genes_histone_joined, complex_df, by = join_by("Complex" == "complexes")) %>% relocate(c("Symbol", "PTM"))
network_df <- left_join(complex_vertices, network_df, by = join_by("vertices" == "Symbol")) %>% rename("vertices" = "Symbol")
complexes <- unique(genes_histone_joined$Complex)
n_complexes <- seq(1, length(complexes))
color_opts <- c("#FFFFFF", qualpalr::qualpal(n = (length(complexes) - 1), colorspace = "rainbow")$hex)
complex_df <- data.frame(complexes, n_complexes, color = color_opts)
complex_vertices <- data.frame(vertices = c(unique(genes_histone_joined$Symbol), unique(genes_histone_joined$PTM)))
network_df <- full_join(genes_histone_joined, complex_df, by = join_by("Complex" == "complexes")) %>% relocate(c("Symbol", "PTM"))
network_df <- left_join(complex_vertices, network_df, by = join_by("vertices" == "Symbol")) %>% rename("Symbol" = "vertices")
network_df$Symbol <- case_when(is.na(network_df$Symbol) ~ network_df$PTM,
.default = network_df$Symbol)
network_df$Source <- case_when(is.na(network_df$Source) ~ "Histone",
.default = network_df$Source)
network_df$Diff <- case_when(network_df$Source == "Histone" ~ network_df$Diff_hist,
.default = network_df$Diff_gene)
#network_df <- drop_na(network_df, Diff)
complex_vert_attr <- left_join(complex_vertices, network_df, by = join_by("vertices" == "Symbol"), multiple = "all") %>% dplyr::select(c("vertices", "Complex", "PTM", "Source", "Diff")) %>% distinct(vertices, .keep_all = TRUE) %>% drop_na(vertices)
complex_graph <- graph_from_data_frame(d = network_df, vertices = complex_vert_attr, directed = FALSE)
View(network_df)
complexes <- unique(genes_histone_joined$Complex)
n_complexes <- seq(1, length(complexes))
color_opts <- c("#FFFFFF", qualpalr::qualpal(n = (length(complexes) - 1), colorspace = "rainbow")$hex)
complex_df <- data.frame(complexes, n_complexes, color = color_opts)
complex_vertices <- data.frame(vertices = c(unique(genes_histone_joined$Symbol), unique(genes_histone_joined$PTM)))
network_df <- full_join(genes_histone_joined, complex_df, by = join_by("Complex" == "complexes")) %>% relocate(c("Symbol", "PTM"))
network_df <- left_join(complex_vertices, network_df, by = join_by("vertices" == "Symbol")) %>% rename("Symbol" = "vertices")
network_df$Symbol <- case_when(is.na(network_df$Symbol) ~ network_df$PTM,
.default = network_df$Symbol)
network_df$PTM <- case_when(is.na(network_df$PTM) ~ network_df$Symbol,
.default = network_df$PTM)
network_df$Source <- case_when(is.na(network_df$Source) ~ "Histone",
.default = network_df$Source)
network_df$Diff <- case_when(network_df$Source == "Histone" ~ network_df$Diff_hist,
.default = network_df$Diff_gene)
#network_df <- drop_na(network_df, Diff)
complex_vert_attr <- left_join(complex_vertices, network_df, by = join_by("vertices" == "Symbol"), multiple = "all") %>% dplyr::select(c("vertices", "Complex", "PTM", "Source", "Diff")) %>% distinct(vertices, .keep_all = TRUE) %>% drop_na(vertices)
complex_graph <- graph_from_data_frame(d = network_df, vertices = complex_vert_attr, directed = FALSE)
complex_vert_attr$Shapes<- case_when(complex_vert_attr$Diff == "Up" ~ "triangle",
complex_vert_attr$Diff == "Down" ~ "triangleDown")
sig_network_py <- r_to_py(complex_vert_attr)
reticulate::repl_python()
htmltools::renderDocument(htmltools::htmlTemplate("networkx-pyvis.html"))
complexes <- unique(genes_histone_joined$Complex)
n_complexes <- seq(1, length(complexes))
color_opts <- c("#FFFFFF", qualpalr::qualpal(n = (length(complexes) - 1), colorspace = "rainbow")$hex)
complex_df <- data.frame(complexes, n_complexes, color = color_opts)
complex_vertices <- data.frame(vertices = c(unique(genes_histone_joined$Symbol), unique(genes_histone_joined$PTM)))
network_df <- full_join(genes_histone_joined, complex_df, by = join_by("Complex" == "complexes")) %>% relocate(c("Symbol", "PTM"))
network_df <- left_join(complex_vertices, network_df, by = join_by("vertices" == "Symbol")) %>% rename("Symbol" = "vertices")
network_df$Symbol <- case_when(is.na(network_df$Symbol) ~ network_df$PTM,
.default = network_df$Symbol)
network_df$PTM <- case_when(is.na(network_df$PTM) ~ network_df$Symbol,
.default = network_df$PTM)
network_df$Source <- case_when(is.na(network_df$Source) ~ "Histone",
.default = network_df$Source)
network_df$Complex <- case_when(is.na(network_df$Complex) ~ "No ID",
.default = network_df$Complex)
network_df$Diff <- case_when(network_df$Source == "Histone" ~ network_df$Diff_hist,
.default = network_df$Diff_gene)
#network_df <- drop_na(network_df, Diff)
complex_vert_attr <- left_join(complex_vertices, network_df, by = join_by("vertices" == "Symbol"), multiple = "all") %>% dplyr::select(c("vertices", "Complex", "PTM", "Source", "Diff")) %>% distinct(vertices, .keep_all = TRUE) %>% drop_na(vertices)
complex_graph <- graph_from_data_frame(d = network_df, vertices = complex_vert_attr, directed = FALSE)
complex_vert_attr$Shapes<- case_when(complex_vert_attr$Diff == "Up" ~ "triangle",
complex_vert_attr$Diff == "Down" ~ "triangleDown")
sig_network_py <- r_to_py(complex_vert_attr)
reticulate::repl_python()
htmltools::renderDocument(htmltools::htmlTemplate("networkx-pyvis.html"))
reticulate::repl_python()
htmltools::renderDocument(htmltools::htmlTemplate("networkx-pyvis.html"))
View(sig_network_py)
# Formatting histone targets
targets <- str_replace_all(str_flatten_comma(str_unique(c(joined_data$Product, joined_data$`Target entity`))), ", ", "|")
# filter by that list
total_histone_int <- filter(histone_single_p, grepl(targets, PTM))
total_histone_int$Diff <- case_when(total_histone_int$`log2(FC)` > 0 ~ "Up",
total_histone_int$`log2(FC)` < 0 ~ "Down",
.default = "0")
total_histone_int <- filter(total_histone_int, !grepl("unmod", PTM))
# Making sure that no histone data has gotten lost in processing -
# this should match the figure from the earlier section
ggplot(total_histone_int, aes(x = `log2(FC)`, y = -log10(`P value`))) +
geom_point() +
geom_vline(xintercept = c(total_FC_threshold, -total_FC_threshold),
alpha = 0.5, linetype = "dashed") +
geom_hline(yintercept = -log10(total_p_threshold),
alpha = 0.5, linetype = "dashed") +
labs(x = "log2(Fold Change)", y = "-log10(P value)",
title = "Figure 7b: Volcano plot") +
geom_text_repel(aes(label = PTM), show.legend = FALSE, size = rel(3)) +
theme(legend.position = "bottom")
# Pivoting and formatting the gene list
genes_pivoted <- dplyr::select(genes, c("HGNC approved symbol", "Protein complex", "Target entity", "Product")) %>% dplyr::rename("Symbol" = "HGNC approved symbol", "Complex" = "Protein complex", "Target" = "Target entity", "Product" = "Product")
genes_pivoted <- genes_pivoted %>%
separate_wider_delim(cols = c("Complex", "Target", "Product"), delim = ", ",
names_sep = "_", too_few = "align_start")
genes_pivoted <- genes_pivoted %>%
pivot_longer(cols = dplyr::starts_with("Complex"), names_to = NULL,
values_to = "Complex", values_drop_na = TRUE) %>%
pivot_longer(cols = dplyr::starts_with("Target"), names_to = NULL,
values_to = "Target", values_drop_na = TRUE) %>%
pivot_longer(cols = dplyr::starts_with("Product"), names_to = NULL,
values_to = "Product", values_drop_na = TRUE)
genes_data_joined <- inner_join(genes_pivoted,
dplyr::select(joined_data, c("HGNC approved symbol",
"log2(FC)", "P value", "Source")),
by = join_by("Symbol" == "HGNC approved symbol"),
relationship = "many-to-many")
# Getting the lists into the right format for the igraph visualization
genes_histone_pivoted <- pivot_longer(genes_data_joined, cols = c("Target", "Product"), names_to = NULL,
values_to = "PTM") %>% distinct()
genes_histone_pivoted$Diff <- case_when(genes_histone_pivoted$`log2(FC)` > 0 ~ "Up",
genes_histone_pivoted$`log2(FC)` < 0 ~ "Down",
.default = "0")
genes_histone_joined <- right_join(genes_histone_pivoted,
dplyr::select(total_histone_int, c("PTM",
"log2(FC)", "P value", "Diff")),
by = c("PTM" = "PTM"), suffix = c("_gene", "_hist"),
relationship = "many-to-many"
)
genes_histone_joined <- relocate(genes_histone_joined, Complex, .after = PTM)
genes_histone_joined[genes_histone_joined == "#"] <- "No ID"
genes_histone_joined$Complex <- genes_histone_joined$Complex %>%  replace_na("No ID")
complexes <- unique(genes_histone_joined$Complex)
n_complexes <- seq(1, length(complexes))
color_opts <- c("#FFFFFF", qualpalr::qualpal(n = (length(complexes) - 1), colorspace = "rainbow")$hex)
complex_df <- data.frame(complexes, n_complexes, color = color_opts)
complex_vertices <- data.frame(vertices = c(unique(genes_histone_joined$Symbol), unique(genes_histone_joined$PTM)))
network_df <- full_join(genes_histone_joined, complex_df, by = join_by("Complex" == "complexes")) %>% relocate(c("Symbol", "PTM"))
network_df <- left_join(complex_vertices, network_df, by = join_by("vertices" == "Symbol")) %>% rename("Symbol" = "vertices")
network_df$Symbol <- case_when(is.na(network_df$Symbol) ~ network_df$PTM,
.default = network_df$Symbol)
network_df$PTM <- case_when(is.na(network_df$PTM) ~ network_df$Symbol,
.default = network_df$PTM)
network_df$Source <- case_when(is.na(network_df$Source) ~ "Histone",
.default = network_df$Source)
network_df$Complex <- case_when(is.na(network_df$Complex) ~ "No ID",
.default = network_df$Complex)
network_df$Diff <- case_when(network_df$Source == "Histone" ~ network_df$Diff_hist,
.default = network_df$Diff_gene)
#network_df <- drop_na(network_df, Diff)
complex_vert_attr <- left_join(complex_vertices, network_df, by = join_by("vertices" == "Symbol"), multiple = "all") %>% dplyr::select(c("vertices", "Complex", "PTM", "Source", "Diff")) %>% distinct(vertices, .keep_all = TRUE) %>% drop_na(vertices)
complex_graph <- graph_from_data_frame(d = network_df, vertices = complex_vert_attr, directed = FALSE)
with_id <- filter(network_df, Complex != "No ID")
sig_network <- distinct(group_by(with_id, Complex), Symbol, .keep_all = TRUE)
sig_network["weight"] <- 1
sig_network$Complex <- factor(sig_network$Complex, levels = unique(as.character(sig_network$Complex)))
ggplot(sig_network, aes(x = Complex, y = weight)) +
geom_col(aes(fill = Complex), position = "stack", width = 0.7) +
geom_label(aes(label = Symbol, angle = 30), size = rel(2),
position = position_stack(vjust = 0.5)) +
guides(fill = "none") +
theme(axis.text.x = element_text(angle = 30, vjust = 1, hjust=1),
axis.title.x = element_blank(), axis.title.y = element_blank(),
plot.margin = margin(t = 10, r = 10, b = 10, l = 10)) +
labs(title = "Figure 7c: Network components")
ggplot(sig_network, aes(x = Complex, y = Symbol, fill = PTM)) +
geom_bin_2d() +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1),
axis.title.x = element_blank(), axis.title.y = element_blank()) +
paletteer::scale_fill_paletteer_d("ggsci::default_igv") +
scale_y_discrete(limits = rev) +
labs(title = "Figure 7d: Network bins")
complex_vert_attr$Shapes<- case_when(complex_vert_attr$Diff == "Up" ~ "triangle",
complex_vert_attr$Diff == "Down" ~ "triangleDown")
sig_network_py <- r_to_py(complex_vert_attr)
reticulate::repl_python()
htmltools::renderDocument(htmltools::htmlTemplate("networkx-pyvis.html"))
View(genes_histone_pivoted)
View(genes_histone_joined)
complexes <- unique(genes_histone_joined$Complex)
n_complexes <- seq(1, length(complexes))
color_opts <- c("#FFFFFF", qualpalr::qualpal(n = (length(complexes) - 1), colorspace = "rainbow")$hex)
complex_df <- data.frame(complexes, n_complexes, color = color_opts)
complex_vertices <- data.frame(vertices = c(unique(genes_histone_joined$Symbol), unique(genes_histone_joined$PTM)))
network_df <- full_join(genes_histone_joined, complex_df, by = join_by("Complex" == "complexes")) %>% relocate(c("Symbol", "PTM"))
network_df <- left_join(complex_vertices, network_df, by = join_by("vertices" == "Symbol")) %>% rename("Symbol" = "vertices")
network_df$Symbol <- case_when(is.na(network_df$Symbol) ~ network_df$PTM,
.default = network_df$Symbol)
network_df$PTM <- case_when(is.na(network_df$PTM) ~ network_df$Symbol,
.default = network_df$PTM)
network_df$Source <- case_when(is.na(network_df$Source) ~ "Histone",
.default = network_df$Source)
network_df$Complex <- case_when(is.na(network_df$Complex) ~ "No ID",
.default = network_df$Complex)
network_df$Diff <- case_when(network_df$Source == "Histone" ~ network_df$Diff_hist,
.default = network_df$Diff_gene)
#network_df <- drop_na(network_df, Diff)
complex_vert_attr <- left_join(complex_vertices, network_df, by = join_by("vertices" == "Symbol"), multiple = "all") %>% dplyr::select(c("vertices", "Complex", "PTM", "Source", "Diff")) %>% distinct(vertices, .keep_all = TRUE) %>% drop_na(vertices)
complex_graph <- graph_from_data_frame(d = network_df, vertices = complex_vert_attr, directed = FALSE)
colnames(genes_histone_joined)
new_vertices <- pivot_longer(genes_histone_joined, cols = c("Diff_gene", "Diff_hist"), names_to = NULL, values_to = "Diff")
View(new_vertices)
new_df <- bind_cols(genes_histone_pivoted, dplyr::select(total_histone_int, c("PTM",
"log2(FC)", "P value", "Diff")))
# Getting the lists into the right format for the igraph visualization
genes_histone_pivoted <- pivot_longer(genes_data_joined, cols = c("Target", "Product"), names_to = NULL,
values_to = "PTM") %>% distinct()
genes_histone_pivoted$Diff <- case_when(genes_histone_pivoted$`log2(FC)` > 0 ~ "Up",
genes_histone_pivoted$`log2(FC)` < 0 ~ "Down",
.default = "0")
new_df <- bind_cols(genes_histone_pivoted, dplyr::select(total_histone_int, c("PTM",
"log2(FC)", "P value", "Diff")))
new_df <- bind_rows(genes_histone_pivoted, dplyr::select(total_histone_int, c("PTM",
"log2(FC)", "P value", "Diff")))
View(new_df)
histone_df <- genes_histone_pivoted
histone_df$Symbol <- histone_df$PTM
histone_df$Complex <- "No ID"
View(histone_df)
histone_df <- genes_histone_pivoted
histone_df <- total_histone_int
histone_df$Symbol <- histone_df$PTM
histone_df <- dplyr::select(total_histone_int, c("PTM", "log2(FC)", "P value", "Diff"))
histone_df$Symbol <- histone_df$PTM
histone_df$Complex <- "No ID"
histone_df <- dplyr::select(total_histone_int, c("PTM", "Diff"))
histone_df$Symbol <- histone_df$PTM
histone_df$Complex <- "No ID"
histone_df$Source <- "Histone"
new_df <- bind_rows(histone_df, genes_histone_joined)
new_df <- bind_rows(histone_df, genes_histone_pivoted)
new_df <- bind_rows(histone_df, dplyr::select(genes_histone_pivoted, !c("log2(FC)", "P value")))
new_df <- bind_rows(histone_df, dplyr::select(genes_histone_pivoted, !c("log2(FC)", "P value"))) %>% relocate("Symbol")
new_df$Shapes<- case_when(new_df$Diff == "Up" ~ "triangle",
new_df$Diff == "Down" ~ "triangleDown")
sig_network_py <- r_to_py(new_df)
reticulate::repl_python()
htmltools::renderDocument(htmltools::htmlTemplate("networkx-pyvis.html"))
new_df <- new_df %>% filter(PTM, grepl("^H", PTM))
new_df_filt <- filter(new_df, grepl("^H", PTM))
View(new_df_filt)
new_df <- filter(new_df, grepl("^H", PTM))
new_df$Shapes<- case_when(new_df$Diff == "Up" ~ "triangle",
new_df$Diff == "Down" ~ "triangleDown")
sig_network_py <- r_to_py(new_df)
reticulate::repl_python()
htmltools::renderDocument(htmltools::htmlTemplate("networkx-pyvis.html"))
edges_py <- r_to_py(network_df)
reticulate::repl_python()
htmltools::renderDocument(htmltools::htmlTemplate("networkx-pyvis.html"))
View(network_df)
network_df <- drop_na(network_df, Diff)
new_df$Shapes<- case_when(new_df$Diff == "Up" ~ "triangle",
new_df$Diff == "Down" ~ "triangleDown")
sig_network_py <- r_to_py(new_df)
edges_py <- r_to_py(network_df)
reticulate::repl_python()
htmltools::renderDocument(htmltools::htmlTemplate("networkx-pyvis.html"))
# Formatting histone targets
targets <- str_replace_all(str_flatten_comma(str_unique(c(joined_data$Product, joined_data$`Target entity`))), ", ", "|")
# filter by that list
total_histone_int <- filter(histone_single_p, grepl(targets, PTM))
total_histone_int$Diff <- case_when(total_histone_int$`log2(FC)` > 0 ~ "Up",
total_histone_int$`log2(FC)` < 0 ~ "Down")
total_histone_int <- filter(total_histone_int, !grepl("unmod", PTM))
# Making sure that no histone data has gotten lost in processing -
# this should match the figure from the earlier section
ggplot(total_histone_int, aes(x = `log2(FC)`, y = -log10(`P value`))) +
geom_point() +
geom_vline(xintercept = c(total_FC_threshold, -total_FC_threshold),
alpha = 0.5, linetype = "dashed") +
geom_hline(yintercept = -log10(total_p_threshold),
alpha = 0.5, linetype = "dashed") +
labs(x = "log2(Fold Change)", y = "-log10(P value)",
title = "Figure 7b: Volcano plot") +
geom_text_repel(aes(label = PTM), show.legend = FALSE, size = rel(3)) +
theme(legend.position = "bottom")
# Pivoting and formatting the gene list
genes_pivoted <- dplyr::select(genes, c("HGNC approved symbol", "Protein complex", "Target entity", "Product")) %>% dplyr::rename("Symbol" = "HGNC approved symbol", "Complex" = "Protein complex", "Target" = "Target entity", "Product" = "Product")
genes_pivoted <- genes_pivoted %>%
separate_wider_delim(cols = c("Complex", "Target", "Product"), delim = ", ",
names_sep = "_", too_few = "align_start")
genes_pivoted <- genes_pivoted %>%
pivot_longer(cols = dplyr::starts_with("Complex"), names_to = NULL,
values_to = "Complex", values_drop_na = TRUE) %>%
pivot_longer(cols = dplyr::starts_with("Target"), names_to = NULL,
values_to = "Target", values_drop_na = TRUE) %>%
pivot_longer(cols = dplyr::starts_with("Product"), names_to = NULL,
values_to = "Product", values_drop_na = TRUE)
genes_data_joined <- inner_join(genes_pivoted,
dplyr::select(joined_data, c("HGNC approved symbol",
"log2(FC)", "P value", "Source")),
by = join_by("Symbol" == "HGNC approved symbol"),
relationship = "many-to-many")
# Formatting histone targets
targets <- str_replace_all(str_flatten_comma(str_unique(c(joined_data$Product, joined_data$`Target entity`))), ", ", "|")
# filter by that list
total_histone_int <- filter(histone_single_p, grepl(targets, PTM))
total_histone_int$Diff <- case_when(total_histone_int$`log2(FC)` > 0 ~ "Up",
total_histone_int$`log2(FC)` < 0 ~ "Down",
.default = "0")
total_histone_int <- filter(total_histone_int, !grepl("unmod", PTM))
# Making sure that no histone data has gotten lost in processing -
# this should match the figure from the earlier section
ggplot(total_histone_int, aes(x = `log2(FC)`, y = -log10(`P value`))) +
geom_point() +
geom_vline(xintercept = c(total_FC_threshold, -total_FC_threshold),
alpha = 0.5, linetype = "dashed") +
geom_hline(yintercept = -log10(total_p_threshold),
alpha = 0.5, linetype = "dashed") +
labs(x = "log2(Fold Change)", y = "-log10(P value)",
title = "Figure 7b: Volcano plot") +
geom_text_repel(aes(label = PTM), show.legend = FALSE, size = rel(3)) +
theme(legend.position = "bottom")
new_df$Shapes<- case_when(new_df$Diff == "Up" ~ "triangle",
new_df$Diff == "Down" ~ "triangleDown",
new_df$Diff == "0" ~ "circle")
sig_network_py <- r_to_py(new_df)
edges_py <- r_to_py(network_df)
reticulate::repl_python()
htmltools::renderDocument(htmltools::htmlTemplate("networkx-pyvis.html"))
new_df$Shapes<- case_when(new_df$Diff == "Up" ~ "triangle",
new_df$Diff == "Down" ~ "triangleDown",
new_df$Diff == "0" ~ "ellipse")
new_df$Shapes<- case_when(new_df$Diff == "Up" ~ "triangle",
new_df$Diff == "Down" ~ "triangleDown",
new_df$Diff == "0" ~ "ellipse")
sig_network_py <- r_to_py(new_df)
edges_py <- r_to_py(network_df)
reticulate::repl_python()
htmltools::renderDocument(htmltools::htmlTemplate("networkx-pyvis.html"))
new_df$Shapes<- case_when(new_df$Diff == "Up" ~ "triangle",
new_df$Diff == "Down" ~ "triangleDown",
new_df$Diff == "0" ~ "ellipse")
new_df$Color <- case_when(new_df$Source == "Total" ~ "red",
new_df$Source == "Phospho" ~ "blue",
new_df$Source == "Histone" ~ "gray")
sig_network_py <- r_to_py(new_df)
edges_py <- r_to_py(network_df)
reticulate::repl_python()
htmltools::renderDocument(htmltools::htmlTemplate("networkx-pyvis.html"))
reticulate::repl_python()
new_df$Shapes<- case_when(new_df$Diff == "Up" ~ "triangle",
new_df$Diff == "Down" ~ "triangleDown",
new_df$Diff == "0" ~ "ellipse")
new_df$Color <- case_when(new_df$Source == "Total" ~ "#f44336",
new_df$Source == "Phospho" ~ "#2986cc",
new_df$Source == "Histone" ~ "#bcbcbc")
sig_network_py <- r_to_py(new_df)
edges_py <- r_to_py(network_df)
reticulate::repl_python()
htmltools::renderDocument(htmltools::htmlTemplate("networkx-pyvis.html"))
new_df$Shapes <- case_when(new_df$Diff == "Up" ~ "triangle",
new_df$Diff == "Down" ~ "triangleDown",
new_df$Diff == "0" ~ "ellipse")
new_df$Colors <- case_when(new_df$Source == "Total" ~ "#f44336",
new_df$Source == "Phospho" ~ "#2986cc",
new_df$Source == "Histone" ~ "#bcbcbc")
sig_network_py <- r_to_py(new_df)
edges_py <- r_to_py(network_df)
reticulate::repl_python()
htmltools::renderDocument(htmltools::htmlTemplate("networkx-pyvis.html"))
View(sig_network)
View(sig_network)
View(sig_network_py)
View(sig_network)
new_df$Shapes <- case_when(new_df$Diff == "Up" ~ "triangle",
new_df$Diff == "Down" ~ "triangleDown",
new_df$Diff == "0" ~ "ellipse")
new_df$Colors <- case_when(new_df$Source == "Total" ~ "#F44336",
new_df$Source == "Phospho" ~ "#2986CC",
new_df$Source == "Histone" ~ "#BCBCBC")
sig_network_py <- r_to_py(new_df)
edges_py <- r_to_py(network_df)
reticulate::repl_python()
htmltools::renderDocument(htmltools::htmlTemplate("networkx-pyvis.html"))
new_df$Shapes <- case_when(new_df$Diff == "Up" ~ "triangle",
new_df$Diff == "Down" ~ "triangleDown",
new_df$Diff == "0" ~ "ellipse")
new_df$Colors <- case_when(new_df$Source == "Total" ~ "#F44336",
new_df$Source == "Phospho" ~ "#2986CC",
new_df$Source == "Histone" ~ "#BCBCBC")
sig_network_py <- r_to_py(new_df)
edges_py <- r_to_py(network_df)
reticulate::repl_python()
htmltools::renderDocument(htmltools::htmlTemplate("networkx-pyvis.html"))
reticulate::repl_python()
htmltools::renderDocument(htmltools::htmlTemplate("networkx-pyvis.html"))
reticulate::repl_python()
