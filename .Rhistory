## code to prepare `THP1_total` dataset goes here
# The cell ranges in the files - this helps reduce variable size
total_range <- cell_cols("D:BI")
# List of all the columns to include
# This protocol assumes you have either data with all the included sample data
# or a file with just the mean and standard deviation
total_cols <- c("Accession", "Abundance Ratio (log2): (JMI) / (Control)",
"Abundance Ratio Adj. P-Value: (JMI) / (Control)",
"Found in Sample: F1: Sample, Control",
"Found in Sample: F2: Sample, Control",
"Found in Sample: F3: Sample, Control",
"Found in Sample: F4: Sample, JMI",
"Found in Sample: F5: Sample, JMI",
"Found in Sample: F6: Sample, JMI",
"Found in Sample: F7: Sample, JMI",
"Found in Sample: F8: Sample, JMI" )
# Rename columns containing the log2FC (if present) and P value so they're easier to use
total_rename <- c("log2(FC)" = "Abundance Ratio (log2): (JMI) / (Control)",
"P value" = "Abundance Ratio Adj. P-Value: (JMI) / (Control)")
THP1_total <- readxl::read_excel("data-raw/33060_Control_vs_Infection_JMI_abundances_normalizedabundances.xlsx",
range = total_range)
THP1_total <- dplyr::select(THP1_total, all_of(total_cols))
THP1_total <- dplyr::rename(THP1_total, all_of(total_rename))
str(THP1_total)
devtools::document()
load_all()
data("THP1_total")
THP1_total <- dplyr::select(THP1_total, all_of(total_cols))
total_range <- cell_cols("D:BI")
# List of all the columns to include
# This protocol assumes you have either data with all the included sample data
# or a file with just the mean and standard deviation
total_cols <- c("Accession", "Abundance Ratio (log2): (JMI) / (Control)",
"Abundance Ratio Adj. P-Value: (JMI) / (Control)",
"Found in Sample: F1: Sample, Control",
"Found in Sample: F2: Sample, Control",
"Found in Sample: F3: Sample, Control",
"Found in Sample: F4: Sample, JMI",
"Found in Sample: F5: Sample, JMI",
"Found in Sample: F6: Sample, JMI",
"Found in Sample: F7: Sample, JMI",
"Found in Sample: F8: Sample, JMI" )
# Rename columns containing the log2FC (if present) and P value so they're easier to use
total_rename <- c("log2(FC)" = "Abundance Ratio (log2): (JMI) / (Control)",
"P value" = "Abundance Ratio Adj. P-Value: (JMI) / (Control)")
THP1_total <- readxl::read_excel("data-raw/33060_Control_vs_Infection_JMI_abundances_normalizedabundances.xlsx",
range = total_range)
THP1_total <- dplyr::select(THP1_total, all_of(total_cols))
THP1_total <- dplyr::rename(THP1_total, all_of(total_rename))
THP1_total <- dplyr::select(THP1_total, all_of(c("Accession", "Abundance Ratio (log2): (JMI) / (Control)",
"Abundance Ratio Adj. P-Value: (JMI) / (Control)",
"Found in Sample: F1: Sample, Control",
"Found in Sample: F2: Sample, Control",
"Found in Sample: F3: Sample, Control",
"Found in Sample: F4: Sample, JMI",
"Found in Sample: F5: Sample, JMI",
"Found in Sample: F6: Sample, JMI",
"Found in Sample: F7: Sample, JMI",
"Found in Sample: F8: Sample, JMI" )))
THP1_total <- readxl::read_excel("data-raw/33060_Control_vs_Infection_JMI_abundances_normalizedabundances.xlsx",
range = cell_cols("D:BI"))
THP1_total <- dplyr::select(THP1_total, all_of(c("Accession", "Abundance Ratio (log2): (JMI) / (Control)",
"Abundance Ratio Adj. P-Value: (JMI) / (Control)",
"Found in Sample: F1: Sample, Control",
"Found in Sample: F2: Sample, Control",
"Found in Sample: F3: Sample, Control",
"Found in Sample: F4: Sample, JMI",
"Found in Sample: F5: Sample, JMI",
"Found in Sample: F6: Sample, JMI",
"Found in Sample: F7: Sample, JMI",
"Found in Sample: F8: Sample, JMI" )))
THP1_total <- dplyr::rename(THP1_total, all_of(c("log2(FC)" = "Abundance Ratio (log2): (JMI) / (Control)",
"P value" = "Abundance Ratio Adj. P-Value: (JMI) / (Control)")))
usethis::use_data(THP1_total, overwrite = TRUE)
document()
load_all()
data("THP1_total")
?MPOInt::THP1_total
usethis::use_data_raw("THP1_phospho")
library(OrganismDbi)
load_all()
data("THP1_total")
## code to prepare `THP1_total` dataset goes here
# The cell ranges in the files - this helps reduce variable size
# List of all the columns to include
# This protocol assumes you have either data with all the included sample data
# or a file with just the mean and standard deviation
# Rename columns containing the log2FC (if present) and P value so they're easier to use
THP1_total <- readxl::read_excel("data-raw/33060_Control_vs_Infection_JMI_abundances_normalizedabundances.xlsx",
range = cell_cols("D:BI"))
THP1_total <- dplyr::select(THP1_total, all_of(c("Accession", "Abundance Ratio (log2): (JMI) / (Control)",
"Abundance Ratio Adj. P-Value: (JMI) / (Control)",
"Found in Sample: F1: Sample, Control",
"Found in Sample: F2: Sample, Control",
"Found in Sample: F3: Sample, Control",
"Found in Sample: F4: Sample, JMI",
"Found in Sample: F5: Sample, JMI",
"Found in Sample: F6: Sample, JMI",
"Found in Sample: F7: Sample, JMI",
"Found in Sample: F8: Sample, JMI" )))
THP1_total <- dplyr::rename(THP1_total, all_of(c("log2(FC)" = "Abundance Ratio (log2): (JMI) / (Control)",
"P value" = "Abundance Ratio Adj. P-Value: (JMI) / (Control)")))
reflist <- OrganismDbi::select(
Homo.sapiens,
keys = keys(Homo.sapiens,keytype = "UNIPROT"),
columns = c("ENTREZID", "SYMBOL"), keytype = "UNIPROT")
library(Homo.sapiens)
## code to prepare `THP1_total` dataset goes here
# The cell ranges in the files - this helps reduce variable size
# List of all the columns to include
# This protocol assumes you have either data with all the included sample data
# or a file with just the mean and standard deviation
# Rename columns containing the log2FC (if present) and P value so they're easier to use
THP1_total <- readxl::read_excel("data-raw/33060_Control_vs_Infection_JMI_abundances_normalizedabundances.xlsx",
range = cell_cols("D:BI"))
THP1_total <- dplyr::select(THP1_total, all_of(c("Accession", "Abundance Ratio (log2): (JMI) / (Control)",
"Abundance Ratio Adj. P-Value: (JMI) / (Control)",
"Found in Sample: F1: Sample, Control",
"Found in Sample: F2: Sample, Control",
"Found in Sample: F3: Sample, Control",
"Found in Sample: F4: Sample, JMI",
"Found in Sample: F5: Sample, JMI",
"Found in Sample: F6: Sample, JMI",
"Found in Sample: F7: Sample, JMI",
"Found in Sample: F8: Sample, JMI" )))
THP1_total <- dplyr::rename(THP1_total, all_of(c("log2(FC)" = "Abundance Ratio (log2): (JMI) / (Control)",
"P value" = "Abundance Ratio Adj. P-Value: (JMI) / (Control)")))
reflist <- OrganismDbi::select(
Homo.sapiens,
keys = keys(Homo.sapiens,keytype = "UNIPROT"),
columns = c("ENTREZID", "SYMBOL"), keytype = "UNIPROT")
THP1_total <- dplyr::left_join(THP1_total, reflist, by = join_by(Accession == UNIPROT), keep = FALSE)
THP1_total <- THP1_total %>%
drop_na(SYMBOL) %>%
distinct(SYMBOL, .keep_all = TRUE)
THP1_total <- THP1_total %>%
dplyr::mutate("SYMBOL2" = `SYMBOL`) %>%
column_to_rownames(var = "SYMBOL")
THP1_total <- THP1_total %>%
dplyr::mutate("SYMBOL2" = `SYMBOL`) %>%
dplyr::column_to_rownames(var = "SYMBOL")
library(tibble)
THP1_total <- THP1_total %>%
dplyr::mutate("SYMBOL2" = `SYMBOL`) %>%
tibble::column_to_rownames(var = "SYMBOL")
## code to prepare `THP1_total` dataset goes here
# The cell ranges in the files - this helps reduce variable size
# List of all the columns to include
# This protocol assumes you have either data with all the included sample data
# or a file with just the mean and standard deviation
# Rename columns containing the log2FC (if present) and P value so they're easier to use
THP1_total <- readxl::read_excel("data-raw/33060_Control_vs_Infection_JMI_abundances_normalizedabundances.xlsx",
range = cell_cols("D:BI"))
THP1_total <- dplyr::select(THP1_total, all_of(c("Accession", "Abundance Ratio (log2): (JMI) / (Control)",
"Abundance Ratio Adj. P-Value: (JMI) / (Control)",
"Found in Sample: F1: Sample, Control",
"Found in Sample: F2: Sample, Control",
"Found in Sample: F3: Sample, Control",
"Found in Sample: F4: Sample, JMI",
"Found in Sample: F5: Sample, JMI",
"Found in Sample: F6: Sample, JMI",
"Found in Sample: F7: Sample, JMI",
"Found in Sample: F8: Sample, JMI" )))
THP1_total <- dplyr::rename(THP1_total, all_of(c("log2(FC)" = "Abundance Ratio (log2): (JMI) / (Control)",
"P value" = "Abundance Ratio Adj. P-Value: (JMI) / (Control)")))
reflist <- OrganismDbi::select(
Homo.sapiens,
keys = keys(Homo.sapiens,keytype = "UNIPROT"),
columns = c("ENTREZID", "SYMBOL"), keytype = "UNIPROT")
THP1_total <- dplyr::left_join(THP1_total, reflist, by = join_by(Accession == UNIPROT), keep = FALSE)
THP1_total <- THP1_total %>%
dplyr::drop_na(SYMBOL) %>%
dplyr::distinct(SYMBOL, .keep_all = TRUE)
library(tidyr)
## code to prepare `THP1_total` dataset goes here
# The cell ranges in the files - this helps reduce variable size
# List of all the columns to include
# This protocol assumes you have either data with all the included sample data
# or a file with just the mean and standard deviation
# Rename columns containing the log2FC (if present) and P value so they're easier to use
THP1_total <- readxl::read_excel("data-raw/33060_Control_vs_Infection_JMI_abundances_normalizedabundances.xlsx",
range = cell_cols("D:BI"))
THP1_total <- dplyr::select(THP1_total, all_of(c("Accession", "Abundance Ratio (log2): (JMI) / (Control)",
"Abundance Ratio Adj. P-Value: (JMI) / (Control)",
"Found in Sample: F1: Sample, Control",
"Found in Sample: F2: Sample, Control",
"Found in Sample: F3: Sample, Control",
"Found in Sample: F4: Sample, JMI",
"Found in Sample: F5: Sample, JMI",
"Found in Sample: F6: Sample, JMI",
"Found in Sample: F7: Sample, JMI",
"Found in Sample: F8: Sample, JMI" )))
THP1_total <- dplyr::rename(THP1_total, all_of(c("log2(FC)" = "Abundance Ratio (log2): (JMI) / (Control)",
"P value" = "Abundance Ratio Adj. P-Value: (JMI) / (Control)")))
reflist <- OrganismDbi::select(
Homo.sapiens,
keys = keys(Homo.sapiens,keytype = "UNIPROT"),
columns = c("ENTREZID", "SYMBOL"), keytype = "UNIPROT")
THP1_total <- dplyr::left_join(THP1_total, reflist, by = join_by(Accession == UNIPROT), keep = FALSE)
THP1_total <- THP1_total %>%
tidyr::drop_na(SYMBOL) %>%
dplyr::distinct(SYMBOL, .keep_all = TRUE)
THP1_total <- THP1_total %>%
dplyr::mutate("SYMBOL2" = `SYMBOL`) %>%
tibble::column_to_rownames(var = "SYMBOL")
usethis::use_data(THP1_total, overwrite = TRUE)
load_all()
data("THP1_total")
str(THP1_total)
document()
## code to prepare `THP1_phospho` dataset goes here
THP1_phospho <- readxl::read_excel("data-raw/PXD_raw.xlsx")
str(THP1_phospho)
## code to prepare `THP1_phospho` dataset goes here
THP1_phospho <- readxl::read_excel("data-raw/PXD_raw.xlsx")
## code to prepare `THP1_phospho` dataset goes here
THP1_phospho <- readxl::read_excel("data-raw/PXD_raw.xlsx", range = cell_cols("A:E"))
THP1_phospho <- THP1_phospho %>%
dplyr::mutate("SYMBOL2" = `SYMBOL`) %>%
tidyr::drop_na(SYMBOL2, `log2(FC)`, `P value`) %>%
dplyr::distinct(SYMBOL2, .keep_all = TRUE) %>%
tibble::column_to_rownames(var = "SYMBOL")
THP1_phospho <- left_join(THP1_phospho, reflist <- OrganismDbi::select(
Homo.sapiens,
keys = keys(Homo.sapiens,keytype = "ENTREZID"),
columns = c("UNIPROT", "SYMBOL"), keytype = "ENTREZID"), by = join_by(SYMBOL2 == SYMBOL, ENTREZID))
str(THP1_phospho)
THP1_phospho <- left_join(THP1_phospho, OrganismDbi::select(
Homo.sapiens,
keys = keys(Homo.sapiens, keytype = "ENTREZID"),
columns = c("UNIPROT", "SYMBOL"), keytype = "ENTREZID"
), by = join_by(SYMBOL2 == SYMBOL, ENTREZID))
THP1_phospho <- left_join(THP1_phospho, OrganismDbi::select(
Homo.sapiens,
keys = keys(Homo.sapiens, keytype = "ENTREZID"),
columns = c("UNIPROT", "SYMBOL"), keytype = "ENTREZID"
), by = join_by(SYMBOL2 == SYMBOL, ENTREZID), relationship = "many-to-many")
## code to prepare `THP1_phospho` dataset goes here
THP1_phospho <- readxl::read_excel("data-raw/PXD_raw.xlsx", range = cell_cols("A:E"))
THP1_phospho <- THP1_phospho %>%
dplyr::mutate("SYMBOL2" = `SYMBOL`) %>%
tidyr::drop_na(SYMBOL2, `log2(FC)`, `P value`) %>%
dplyr::distinct(SYMBOL2, .keep_all = TRUE) %>%
tibble::column_to_rownames(var = "SYMBOL")
THP1_phospho <- left_join(THP1_phospho, OrganismDbi::select(
Homo.sapiens,
keys = keys(Homo.sapiens, keytype = "ENTREZID"),
columns = c("UNIPROT", "SYMBOL"), keytype = "ENTREZID"
), by = join_by(SYMBOL2 == SYMBOL, ENTREZID), relationship = "many-to-many")
usethis::use_data(THP1_phospho, overwrite = TRUE)
document()
use_r("THP1_phospho")
document()
str(THP1_phospho)
## code to prepare `THP1_phospho` dataset goes here
THP1_phospho <- readxl::read_excel("data-raw/PXD_raw.xlsx", range = cell_cols("B:E"))
THP1_phospho <- THP1_phospho %>%
dplyr::mutate("SYMBOL2" = `SYMBOL`) %>%
tidyr::drop_na(SYMBOL2, `log2(FC)`, `P value`) %>%
dplyr::distinct(SYMBOL2, .keep_all = TRUE) %>%
tibble::column_to_rownames(var = "SYMBOL")
THP1_phospho <- left_join(THP1_phospho, OrganismDbi::select(
Homo.sapiens,
keys = keys(Homo.sapiens, keytype = "ENTREZID"),
columns = c("UNIPROT", "SYMBOL"), keytype = "ENTREZID"
), by = join_by(SYMBOL2 == SYMBOL, ENTREZID), relationship = "many-to-many")
usethis::use_data(THP1_phospho, overwrite = TRUE)
str(THP1_phospho)
document()
load_all()
data("THP1_phospho")
data("THP1_total")
document()
use_data_raw("THP1_histones")
## code to prepare `THP1_histones` dataset goes here
THP1_histones <- readxl::read_excel("data-raw/histone_ratios.xls")
## code to prepare `THP1_histones` dataset goes here
THP1_histones <- readxl::read_excel("data-raw/histone_ratios.xls", range = cell_limits(c(4, 1), c(NA, 11)), col_names = c("PTM", "C1", "I1", "C2", "I2", "C3", "I3", "C4", "I4", "C5", "I5")))
## code to prepare `THP1_histones` dataset goes here
THP1_histones <- readxl::read_excel("data-raw/histone_ratios.xls", range = cell_limits(c(4, 1), c(NA, 11)), col_names = c("PTM", "C1", "I1", "C2", "I2", "C3", "I3", "C4", "I4", "C5", "I5"))
str(THP1_histones)
## code to prepare `THP1_histones` dataset goes here
THP1_histones <- readxl::read_excel("data-raw/histone_ratios.xls", range = cell_limits(c(4, 1), c(NA, 11)), col_names = c("PTM", "C1", "I1", "C2", "I2", "C3", "I3", "C4", "I4", "C5", "I5"))
usethis::use_data(THP1_histones, overwrite = TRUE)
use_r("THP1_histones")
#'
#' @format A data frame with 4,178 rows and 13 variables:
#' \describe{
#' \item{PTM}{PTM descriptions.}
#' \item{C1}{C1 peptide abundances.}
#' \item{C1}{C1 peptide abundances.}
#' \item{C1}{C1 peptide abundances.}
#' }
#'
#' @source \url{https://doi.org/10.1016/j.mcpro.2024.100851}
"THP1_histones"
document()
document()
use_data_raw("MCF7_total")
??log2
?log2
## code to prepare `MCF7_total` dataset goes here
MCF7_total <- readxl::read_excel("data-raw/MCF_total.xlsx", range = cell_cols("A:V"))
MCF7_total <- dplyr::select(MCF7_total, all_of(c("Protein accession", "M90/F Ratio", "M90/F P value")))
# Rename columns containing the log2FC (if present), Accession, and P value so they're easier to use
MCF7_total <- dplyr::rename(total_raw, all_of(c("Accession" = "Protein accession",
"P value" = "M90/F P value")))
## code to prepare `MCF7_total` dataset goes here
MCF7_total <- readxl::read_excel("data-raw/MCF_total.xlsx", range = cell_cols("A:V"))
MCF7_total <- dplyr::select(MCF7_total, all_of(c("Protein accession", "M90/F Ratio", "M90/F P value")))
# Rename columns containing the log2FC (if present), Accession, and P value so they're easier to use
MCF7_total <- dplyr::rename(total_raw, all_of(c("Accession" = "Protein accession",
"P value" = "M90/F P value")))
## code to prepare `MCF7_total` dataset goes here
MCF7_total <- readxl::read_excel("data-raw/MCF_total.xlsx", range = cell_cols("A:V"))
MCF7_total <- dplyr::select(MCF7_total, all_of(c("Protein accession", "M90/F Ratio", "M90/F P value")))
# Rename columns containing the log2FC (if present), Accession, and P value so they're easier to use
MCF7_total <- dplyr::rename(MCF7_total, all_of(c("Accession" = "Protein accession",
"P value" = "M90/F P value")))
MCF7_total <- left_join(MCF7_total, OrganismDbi::select(
Homo.sapiens,
keys = keys(Homo.sapiens,keytype = "UNIPROT"),
columns = c("ENTREZID", "SYMBOL"), keytype = "UNIPROT"), by = join_by(Accession == UNIPROT), keep = FALSE, relationship = "many-to-many")
# Drop invalid data (NA), drop any duplicate cases, rename columns for clarity
MCF7_total <- MCF7_total %>%
tidyr::drop_na(SYMBOL) %>%
dplyr::distinct(SYMBOL, .keep_all = TRUE)
# If needed, calculate the log2FC for mean data
MCF7_total$`log2(FC)` <- log2(MCF7_total$`M90/F Ratio`)
# Assign symbols to row names
MCF7_total <- MCF7_total %>%
dplyr::mutate("SYMBOL2" = `SYMBOL`) %>%
tibble::column_to_rownames(var = "SYMBOL")
usethis::use_data(MCF7_total, overwrite = TRUE)
use_r("MCF7_total")
str(MCF7_total)
document()
use_data_raw("MCF7_phospho")
MCF7_phospho <- readxl::read_excel("data-raw/MCF_phospho.xlsx", range = cell_cols("A:AA"))
# Rename columns containing the log2FC (if present), Accession, and P value so they're easier to use
MCF7_phospho <- dplyr::rename(MCF7_phospho, all_of(c("Gene name" = "SYMBOL", "Protein accession" = "Accession",
"M90/F P value" = "P value")))
## code to prepare `MCF7_phospho` dataset goes here
MCF7_phospho <- readxl::read_excel("data-raw/MCF_phospho.xlsx", range = cell_cols("A:AA"))
colnames(MCF7_phospho)
MCF7_phospho <- dplyr::rename(MCF7_phospho, all_of(c("SYMBOL" = "Gene name", "Accession" = "Protein accession", "P value" = "M90/F P value")))
## code to prepare `MCF7_phospho` dataset goes here
MCF7_phospho <- readxl::read_excel("data-raw/MCF_phospho.xlsx", range = cell_cols("A:AA"))
# Rename columns containing the log2FC (if present), Accession, and P value so they're easier to use
MCF7_phospho <- dplyr::rename(MCF7_phospho, all_of(c("SYMBOL" = "Gene name", "Accession" = "Protein accession", "P value" = "M90/F P value")))
MCF7_phospho <- left_join(MCF7_phospho, OrganismDbi::select(
Homo.sapiens,
keys = keys(Homo.sapiens,keytype = "UNIPROT"),
columns = c("ENTREZID", "SYMBOL"), keytype = "UNIPROT"), by = join_by(Accession == UNIPROT), keep = FALSE, relationship = "many-to-many")
# Drop invalid data (NA), drop any duplicate cases, rename columns for clarity
MCF7_phospho <- MCF7_phospho %>%
tidyr::drop_na(SYMBOL) %>%
dplyr::distinct(SYMBOL, .keep_all = TRUE)
MCF7_phospho <- left_join(MCF7_phospho, OrganismDbi::select(
Homo.sapiens,
keys = keys(Homo.sapiens,keytype = "UNIPROT"),
columns = c("ENTREZID", "SYMBOL"), keytype = "UNIPROT"), by = join_by(Accession == UNIPROT), keep = FALSE, relationship = "many-to-many")
# Drop invalid data (NA), drop any duplicate cases, rename columns for clarity
MCF7_phospho <- MCF7_phospho %>%
tidyr::drop_na(SYMBOL) %>%
dplyr::distinct(SYMBOL, .keep_all = TRUE)
View(MCF7_phospho)
## code to prepare `MCF7_phospho` dataset goes here
MCF7_phospho <- readxl::read_excel("data-raw/MCF_phospho.xlsx", range = cell_cols("A:AA"))
MCF7_phospho <- dplyr::rename(MCF7_phospho, all_of(c("SYMBOL" = "Gene name", "Accession" = "Protein accession", "P value" = "M90/F P value")))
MCF7_phospho <- left_join(MCF7_phospho, OrganismDbi::select(
Homo.sapiens,
keys = keys(Homo.sapiens,keytype = "UNIPROT"),
columns = c("ENTREZID", "SYMBOL"), keytype = "UNIPROT"), by = join_by(Accession == UNIPROT), keep = FALSE, relationship = "many-to-many")
# Drop invalid data (NA), drop any duplicate cases, rename columns for clarity
MCF7_phospho <- MCF7_phospho %>%
tidyr::drop_na(SYMBOL) %>%
dplyr::distinct(SYMBOL, .keep_all = TRUE)
## code to prepare `MCF7_phospho` dataset goes here
MCF7_phospho <- readxl::read_excel("data-raw/MCF_phospho.xlsx", range = cell_cols("A:AA"))
MCF7_phospho <- dplyr::rename(MCF7_phospho, all_of(c("SYMBOL" = "Gene name", "Accession" = "Protein accession", "P value" = "M90/F P value")))
MCF7_phospho <- left_join(MCF7_phospho, OrganismDbi::select(
Homo.sapiens,
keys = keys(Homo.sapiens,keytype = "UNIPROT"),
columns = "ENTREZID", keytype = "UNIPROT"), by = join_by(Accession == UNIPROT), keep = FALSE, relationship = "many-to-many")
# Drop invalid data (NA), drop any duplicate cases, rename columns for clarity
MCF7_phospho <- MCF7_phospho %>%
tidyr::drop_na(SYMBOL) %>%
dplyr::distinct(SYMBOL, .keep_all = TRUE)
MCF7_phospho <- readxl::read_excel("data-raw/MCF_phospho.xlsx", range = cell_cols("A:AA"))
# Rename columns containing the log2FC (if present), Accession, and P value so they're easier to use
MCF7_phospho <- dplyr::rename(MCF7_phospho, all_of(c("SYMBOL" = "Gene name", "Accession" = "Protein accession", "P value" = "M90/F P value")))
MCF7_phospho <- left_join(MCF7_phospho, OrganismDbi::select(
Homo.sapiens,
keys = keys(Homo.sapiens,keytype = "UNIPROT"),
columns = "ENTREZID", keytype = "UNIPROT"), by = join_by(Accession == UNIPROT), keep = FALSE, relationship = "many-to-many")
# Drop invalid data (NA), drop any duplicate cases, rename columns for clarity
MCF7_phospho <- MCF7_phospho %>%
tidyr::drop_na(SYMBOL) %>%
dplyr::distinct(SYMBOL, .keep_all = TRUE)
# If needed, calculate the log2FC for mean data
MCF7_phospho$`log2(FC)` <- log2(MCF7_phospho$`M90/F Ratio`)
# Assign symbols to row names
MCF7_phospho <- MCF7_phospho %>%
dplyr::mutate("SYMBOL2" = `SYMBOL`) %>%
tibble::column_to_rownames(var = "SYMBOL")
usethis::use_data(MCF7_phospho, overwrite = TRUE)
use_r("MCF7_phospho")
## code to prepare `MCF7_total` dataset goes here
MCF7_total <- readxl::read_excel("data-raw/MCF_total.xlsx", range = cell_cols("A:V"))
MCF7_total <- dplyr::select(MCF7_total, all_of(c("Protein accession", "M90/F Ratio", "M90/F P value")))
# Rename columns containing the log2FC (if present), Accession, and P value so they're easier to use
MCF7_total <- dplyr::rename(MCF7_total, all_of(c("Accession" = "Protein accession",
"P value" = "M90/F P value")))
MCF7_total <- left_join(MCF7_total, OrganismDbi::select(
Homo.sapiens,
keys = keys(Homo.sapiens,keytype = "UNIPROT"),
columns = c("ENTREZID", "SYMBOL"), keytype = "UNIPROT"), by = join_by(Accession == UNIPROT), keep = FALSE, relationship = "many-to-many")
# Drop invalid data (NA), drop any duplicate cases, rename columns for clarity
MCF7_total <- MCF7_total %>%
tidyr::drop_na(SYMBOL) %>%
dplyr::distinct(SYMBOL, .keep_all = TRUE)
# If needed, calculate the log2FC for mean data
MCF7_total$`log2(FC)` <- log2(MCF7_total$`M90/F Ratio`)
# Assign symbols to row names
MCF7_total <- MCF7_total %>%
dplyr::mutate("SYMBOL2" = `SYMBOL`) %>%
tibble::column_to_rownames(var = "SYMBOL")
load_all()
document()
data("MCF7_phospho")
data("MCF7_total")
colnames(MCF7_phospho)
View(MCF7_phospho)
MCF7_phospho<- dplyr::select(MCF7_phospho, all_of(c(
"Accession", "Position", "Amino acid", "F1", "F2", "F3", "M901", "M902", "M903", "M90/F Ratio", "P value", "ENTREZID", "log2(FC)", "SYMBOL2"
)))
colnames(MCF7_phospho)
document()
use_data_raw("MCF7_histones")
## code to prepare `MCF7_histones` dataset goes here
MCF7_histones <- readxl::read_excel("data-raw/MCF_histone_frag.xlsx")
MCF7_histones <- MCF7_histones %>%
dplyr::select(c("PTM", "MCF7 ave (5 reps)", "MCF7 std",
"293 ave (5 reps)", "HaCAT ave (5 reps)",
"hESC ave (6 reps)", "HFF ave (7 reps)",
"Mdm13 ave (5 reps)")) %>%
dplyr::mutate("ctrl ave" = rowMeans(pick("293 ave (5 reps)", "HaCAT ave (5 reps)",
"hESC ave (6 reps)", "HFF ave (7 reps)",
"Mdm13 ave (5 reps)"))) %>%
dplyr::mutate("log2(FC)" = log2(`MCF7 ave (5 reps)`/`ctrl ave`)) %>%
dplyr::mutate("T score" = NA) %>%
dplyr::mutate("P value" = NA)
MCF7_histones <- MCF7_histones %>%
dplyr::mutate("T score" = (`MCF7 ave (5 reps)` - `ctrl ave`)/(`MCF7 std`/sqrt(5))) %>%
dplyr::mutate("P value" = pt(q = `T score`, df = 4))
MCF7_histones <- readxl::read_excel("data-raw/MCF_histone_frag.xlsx")
MCF7_histones <- MCF7_histones %>%
dplyr::select(c("PTM", "MCF7 ave (5 reps)", "MCF7 std",
"293 ave (5 reps)", "HaCAT ave (5 reps)",
"hESC ave (6 reps)", "HFF ave (7 reps)",
"Mdm13 ave (5 reps)")) %>%
dplyr::mutate("ctrl ave" = rowMeans(pick("293 ave (5 reps)", "HaCAT ave (5 reps)",
"hESC ave (6 reps)", "HFF ave (7 reps)",
"Mdm13 ave (5 reps)"))) %>%
dplyr::mutate("log2(FC)" = log2(`MCF7 ave (5 reps)`/`ctrl ave`)) %>%
dplyr::mutate("T score" = NA) %>%
dplyr::mutate("P value" = NA)
MCF7_histones <- MCF7_histones %>%
dplyr::mutate("T score" = (`MCF7 ave (5 reps)` - `ctrl ave`)/(`MCF7 std`/sqrt(5))) %>%
dplyr::mutate("P value" = pt(q = `T score`, df = 4))
usethis::use_data(MCF7_histones, overwrite = TRUE)
use_r("MCF7_histones")
str(MCF7_histones)
document()
load_all()
data("MCF7_histones")
THP1_total <- readxl::read_excel("data-raw/33060_Control_vs_Infection_JMI_abundances_normalizedabundances.xlsx",
range = cell_cols("D:BI")
)
THP1_total <- dplyr::select(THP1_total, all_of(c(
"Accession", "Abundance Ratio (log2): (JMI) / (Control)",
"Abundance Ratio Adj. P-Value: (JMI) / (Control)",
"Found in Sample: F1: Sample, Control",
"Found in Sample: F2: Sample, Control",
"Found in Sample: F3: Sample, Control",
"Found in Sample: F4: Sample, JMI",
"Found in Sample: F5: Sample, JMI",
"Found in Sample: F6: Sample, JMI",
"Found in Sample: F7: Sample, JMI",
"Found in Sample: F8: Sample, JMI"
)))
str(THP1_total)
## Code to prepare `THP1_phospho` dataset
THP1_phospho <- readxl::read_excel("data-raw/PXD_raw.xlsx", range = cell_cols("B:E"))
str(THP1_phospho)
use_data_raw("genes")
library(readr)
genes <- readr::read_csv("data_raw/genes.csv")
genes <- readr::read_csv("data-raw/genes.csv")
genes <- readr::read_csv("data-raw/genes.csv")
genes <- readr::read_csv("data-raw/genes.csv", n_max = 6)
mem.maxVSize()
genes <- readr::read_csv("data-raw/genes.csv", n_max = 6)
Sys.setenv('R_MAX_VSIZE'=32000000000)
genes <- readr::read_csv("data-raw/genes.csv", n_max = 6)
?read_csv_chunked
genes <- readr::read_csv_chunked("data-raw/genes.csv")
gc()
gc()
genes <- readr::read_csv_chunked("data-raw/genes.csv")
genes <- readr::read_csv("data-raw/genes.csv", n_max = 6)
