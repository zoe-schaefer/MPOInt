[{"path":"https://zoe-schaefer.github.io/MPOInt/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 MPOInt authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/articles/BCG_case.html","id":"proteome-data-processing","dir":"Articles","previous_headings":"","what":"1. Proteome data processing","title":"BCG case","text":"section prepares proteome data. data example, read data place data() call.","code":"data(THP1_total) # Renaming to reader-friendly names THP1_total <- dplyr::rename(THP1_total, all_of(c(   \"log2(FC)\" = \"Abundance Ratio (log2): (JMI) / (Control)\",   \"P value\" = \"Abundance Ratio Adj. P-Value: (JMI) / (Control)\" ))) # Mapping ENTREZ IDs and a gene symbol column to UniProt IDs for later analysis THP1_total <- dplyr::left_join(THP1_total, OrganismDbi::select(   Homo.sapiens::Homo.sapiens,   keys = OrganismDbi::keys(Homo.sapiens::Homo.sapiens, keytype = \"UNIPROT\"),   columns = c(\"ENTREZID\", \"SYMBOL\"), keytype = \"UNIPROT\" ), by = dplyr::join_by(Accession == UNIPROT), keep = FALSE) #> 'select()' returned 1:many mapping between keys and columns # Dropping anything with an undefined or duplicate symbol THP1_total <- THP1_total %>%   tidyr::drop_na(SYMBOL) %>%   dplyr::distinct(SYMBOL, .keep_all = TRUE) # Assigning row names THP1_total <- THP1_total %>%   dplyr::mutate(\"SYMBOL2\" = `SYMBOL`) %>%   tibble::column_to_rownames(var = \"SYMBOL\")  # Creating a separate set of significant points for later analysis THP1_total_sig <- dplyr::filter(THP1_total, `P value` < total_p_threshold)"},{"path":"https://zoe-schaefer.github.io/MPOInt/articles/BCG_case.html","id":"volcano-plots","dir":"Articles","previous_headings":"1. Proteome data processing","what":"1.1. Volcano plots","title":"BCG case","text":"create several volcano plots show data.  known proteins interest, use volcano_groups() highlight graph.","code":"# Setting this value - geom_text_repel will only show so many labels at once # for legibility reasons. Adjust this threshold to show more/fewer points. options(\"ggrepel.max.overlaps\" = 20)  volcanoplot(df = THP1_total, fc_col = \"log2(FC)\",             p_col = \"P value\", label_col = \"SYMBOL2\") +   ggtitle(\"Volcano plot\") + xlab(\"log2(FC)\") + ylab(\"-log10(P-value)\") #> Warning: ggrepel: 256 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps # For known groups of interest volcano_groups(df = THP1_total, fc_col = \"log2(FC)\", p_col = \"P value\", label_col = \"SYMBOL2\",   group_list = list(\"Group 1\" = c(\"MORF4L1\", \"SAMSN1\", \"DTX3L\", \"MBD3\",  \"HSF1\",   \"EYA3\", \"NCAPD2\", \"TAF9\", \"PPP4C\", \"ZNF638\"), \"Group 2\" = c(\"CD9\", \"CD82\", \"NFKB1\", \"BST2\", \"CTSH\"))) +   scale_color_manual(values = c(\"Group 1\" = \"red\", \"Group 2\" = \"blue\", \"None\" = \"gray\")) +   ggtitle(\"Grouped volcano plot\") + xlab(\"log2FC\") + ylab(\"-log10P\")"},{"path":"https://zoe-schaefer.github.io/MPOInt/articles/BCG_case.html","id":"gsea","dir":"Articles","previous_headings":"1. Proteome data processing","what":"1.2. GSEA","title":"BCG case","text":"section prepares performs GSEA analysis total proteome data using clusterProfiler package. Plotting GSEA dot plots can difficult due volume information included. Changing value label_format adjusts label wrapping, can help crowded figures.","code":"# Need a named list in decreasing order total_GSEA_list <- THP1_total$`log2(FC)` names(total_GSEA_list) <- THP1_total$ENTREZID total_GSEA_list <- na.omit(total_GSEA_list) total_GSEA_list <- sort(total_GSEA_list, decreasing = TRUE) total_GSEA_GO <- gseGO(geneList = total_GSEA_list, OrgDb = \"org.Hs.eg.db\",                     verbose = FALSE, ont = \"ALL\") #> Warning in preparePathwaysAndStats(pathways, stats, minSize, maxSize, gseaParam, : There are ties in the preranked stats (86.12% of the list). #> The order of those tied genes will be arbitrary, which may produce unexpected results. total_GSEA_KEGG <- gseKEGG(geneList = total_GSEA_list, verbose = FALSE) #> Reading KEGG annotation online: \"https://rest.kegg.jp/link/hsa/pathway\"... #> Reading KEGG annotation online: \"https://rest.kegg.jp/list/pathway/hsa\"... #> Warning in preparePathwaysAndStats(pathways, stats, minSize, maxSize, gseaParam, : There are ties in the preranked stats (86.12% of the list). #> The order of those tied genes will be arbitrary, which may produce unexpected results. if (nrow(total_GSEA_GO@result) > 0) {   dotplot(total_GSEA_GO, showCategory = 20, font.size = rel(1), label_format = 40, title = \"Total GO enrichment\",           split = \"ONTOLOGY\") + facet_wrap(ONTOLOGY~.sign) } else {   print(\"Error: no terms enriched under P-value cutoff (total_GSEA_GO)\") } if (nrow(total_GSEA_KEGG@result) > 0) {   dotplot(total_GSEA_KEGG, showCategory = 20, font.size = rel(1), label_format = 40, title = \"Total KEGG enrichment\",           split = \".sign\") + facet_wrap(.~.sign) } else {   print(\"Error: no terms enriched under P-value cutoff (total_GSEA_KEGG)\") } # Clearing large variables rm(THP1_total, total_GSEA_GO, total_GSEA_KEGG, total_GSEA_list)"},{"path":"https://zoe-schaefer.github.io/MPOInt/articles/BCG_case.html","id":"phosphoproteome-data-processing","dir":"Articles","previous_headings":"","what":"2. Phosphoproteome data processing","title":"BCG case","text":"Similar previous section, prepares phosphoproteome data.","code":"# Renaming to reader-friendly names not necessary here data(THP1_phospho) # Mapping ENTREZ IDs and a gene symbol column to UniProt IDs for later analysis THP1_phospho <- dplyr::left_join(THP1_phospho, OrganismDbi::select(   Homo.sapiens::Homo.sapiens,   keys = OrganismDbi::keys(Homo.sapiens::Homo.sapiens, keytype = \"ENTREZID\"),   columns = c(\"UNIPROT\", \"SYMBOL\"), keytype = \"ENTREZID\" ), by = dplyr::join_by(SYMBOL2 == SYMBOL, ENTREZID), keep = FALSE, relationship = \"many-to-many\") #> 'select()' returned 1:many mapping between keys and columns # Dropping anything with an undefined or duplicate symbol THP1_phospho <- THP1_phospho %>%   tidyr::drop_na(SYMBOL2) %>%   dplyr::distinct(SYMBOL2, .keep_all = TRUE) # Assigning row names THP1_phospho <- THP1_phospho %>%   dplyr::mutate(\"SYMBOL\" = `SYMBOL2`) %>%   tibble::column_to_rownames(var = \"SYMBOL\")  # Creating a separate set of significant points for later analysis THP1_phospho_sig <- dplyr::filter(THP1_phospho, `P value` < phospho_p_threshold)"},{"path":"https://zoe-schaefer.github.io/MPOInt/articles/BCG_case.html","id":"volcano-plots-1","dir":"Articles","previous_headings":"2. Phosphoproteome data processing","what":"2.1. Volcano plots","title":"BCG case","text":"","code":"# Setting this value - geom_text_repel will only show so many labels at once # for legibility reasons. Adjust this threshold to show more/fewer points. options(\"ggrepel.max.overlaps\" = 20)  volcanoplot(df = THP1_phospho, fc_col = \"log2(FC)\",             p_col = \"P value\", label_col = \"SYMBOL2\") +   ggtitle(\"Volcano plot\") + xlab(\"log2(FC)\") + ylab(\"-log10(P-value)\") #> Warning: ggrepel: 1256 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps # For known groups of interest volcano_groups(df = THP1_phospho, fc_col = \"log2(FC)\", p_col = \"P value\", label_col = \"SYMBOL2\",   group_list = list(\"Group 1\" = c(\"ASH2L\", \"ASXL1\", \"ASXL2\", \"BAP1\", \"BMI1\", \"CHD4\", \"EZH2\", \"DMAP1\",   \"EP400\", \"GATAD2B\", \"KANSL1\", \"KANSL3\", \"KMT2C\", \"KMT2D\", \"MBD3\",   \"MEN1\", \"MGA\", \"MRGBP\", \"MTA1\", \"NCOA6\", \"PHC2\", \"PHF20L1\", \"REST\",   \"RING1\", \"RUVBL1\", \"SAP130\", \"SCML2\", \"SIRT3\", \"SIRT6\", \"EP300\"), \"Group 2\" = c(\"FANCI\", \"CDK14\", \"PRDM1\", \"ICAM1\", \"CDK1\", \"RUNX3\", \"NOTCH3\", \"CASP8\",   \"BST2\", \"CTSL\", \"MX2\", \"CASP1\", \"STAT2\", \"MX1\"))) +   scale_color_manual(values = c(\"Group 1\" = \"red\", \"Group 2\" = \"blue\", \"None\" = \"gray\")) +   ggtitle(\"Grouped volcano plot\") + xlab(\"log2FC\") + ylab(\"-log10P\") #> Warning: ggrepel: 1 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps"},{"path":"https://zoe-schaefer.github.io/MPOInt/articles/BCG_case.html","id":"gsea-1","dir":"Articles","previous_headings":"2. Phosphoproteome data processing","what":"2.2. GSEA","title":"BCG case","text":"use simplify function clusterProfiler combine redundant GSEA terms similarity. allows unique pathways displayed.","code":"# Need a named list in decreasing order phospho_GSEA_list <- THP1_phospho$`log2(FC)` names(phospho_GSEA_list) <- THP1_phospho$ENTREZID phospho_GSEA_list <- na.omit(phospho_GSEA_list) phospho_GSEA_list <- sort(phospho_GSEA_list, decreasing = TRUE) phospho_GSEA_GO <- gseGO(geneList = phospho_GSEA_list, OrgDb = \"org.Hs.eg.db\",                     verbose = FALSE, ont = \"ALL\") #> Warning in preparePathwaysAndStats(pathways, stats, minSize, maxSize, gseaParam, : There are ties in the preranked stats (2.95% of the list). #> The order of those tied genes will be arbitrary, which may produce unexpected results. #> Warning in fgseaMultilevel(pathways = pathways, stats = stats, minSize = #> minSize, : There were 210 pathways for which P-values were not calculated #> properly due to unbalanced (positive and negative) gene-level statistic values. #> For such pathways pval, padj, NES, log2err are set to NA. You can try to #> increase the value of the argument nPermSimple (for example set it nPermSimple #> = 10000) #> Warning in fgseaMultilevel(pathways = pathways, stats = stats, minSize = #> minSize, : For some of the pathways the P-values were likely overestimated. For #> such pathways log2err is set to NA. #> Warning in fgseaMultilevel(pathways = pathways, stats = stats, minSize = #> minSize, : For some pathways, in reality P-values are less than 1e-10. You can #> set the `eps` argument to zero for better estimation. # By visual inspection of graphs, this contained redundant terms simple_phospho_GSEA_GO <- clusterProfiler::simplify(phospho_GSEA_GO) phospho_GSEA_KEGG <- gseKEGG(geneList = phospho_GSEA_list, verbose = FALSE) #> Warning in preparePathwaysAndStats(pathways, stats, minSize, maxSize, gseaParam, : There are ties in the preranked stats (2.95% of the list). #> The order of those tied genes will be arbitrary, which may produce unexpected results. #> Warning in fgseaMultilevel(pathways = pathways, stats = stats, minSize = #> minSize, : There were 19 pathways for which P-values were not calculated #> properly due to unbalanced (positive and negative) gene-level statistic values. #> For such pathways pval, padj, NES, log2err are set to NA. You can try to #> increase the value of the argument nPermSimple (for example set it nPermSimple #> = 10000) #> Warning in fgseaMultilevel(pathways = pathways, stats = stats, minSize = #> minSize, : For some of the pathways the P-values were likely overestimated. For #> such pathways log2err is set to NA. #> Warning in fgseaMultilevel(pathways = pathways, stats = stats, minSize = #> minSize, : For some pathways, in reality P-values are less than 1e-10. You can #> set the `eps` argument to zero for better estimation. if (nrow(simple_phospho_GSEA_GO@result) > 0) {   dotplot(simple_phospho_GSEA_GO, showCategory = 20, font.size = rel(1), label_format = 50, title = \"Phospho GO enrichment\",           split = \"ONTOLOGY\") + facet_wrap(ONTOLOGY~.sign, scales = \"free_y\", ncol = 2) } else {   print(\"Error: no terms enriched under P-value cutoff (simple_phospho_GSEA_GO)\") } if (nrow(phospho_GSEA_KEGG@result) > 0) {   dotplot(phospho_GSEA_KEGG, showCategory = 20, font.size = rel(1), label_format = 40, title = \"Phospho KEGG enrichment\",           split = \".sign\") + facet_wrap(.~.sign, scales = \"free\", ncol = 2) } else {   print(\"Error: no terms enriched under P-value cutoff (phospho_GSEA_KEGG)\") } # Clearing large variables rm(phospho_GSEA_GO, phospho_GSEA_KEGG, simple_phospho_GSEA_GO, THP1_phospho,    phospho_GSEA_list)"},{"path":"https://zoe-schaefer.github.io/MPOInt/articles/BCG_case.html","id":"histone-processing","dir":"Articles","previous_headings":"","what":"3. Histone processing","title":"BCG case","text":"section processes EpiProfile output readable, user-friendly format. also perform basic statistical analysis log transformations data.","code":"data(THP1_histones) histone_frag_raw <- tidyr::drop_na(THP1_histones) histone_frag_raw$PTM <- histone_frag_raw$PTM %>%    str_replace_all(\"H3_3_8\", \"H3 3-8\") %>%    str_replace_all(\"H3_9_17\", \"H3 9-17\") %>%    str_replace_all(\"H3_18_26\", \"H3 18-26\") %>%    str_replace_all(\"H3_27_40\", \"H3 27-40\") %>%    str_replace_all(\"H33_27_40\", \"H3.3 27-40\") %>%    str_replace_all(\"H3_41_49\", \"H3 41-49\") %>%    str_replace_all(\"H3_54_63\", \"H3 54-63\") %>%    str_replace_all(\"H3_73_83\", \"H3 73-83\") %>%    str_replace_all(\"H3_117_128\", \"H3 117-128\") %>%    str_replace_all(\"H4_4_17\", \"H4 4-17\") %>%    str_replace_all(\"H4_20_23\", \"H4 20-23\") %>%    str_replace_all(\"H4_24_35\", \"H4 24-35\") %>%    str_replace_all(\"H4_40_45\", \"H4 40-45\") %>%    str_replace_all(\"H4_79_92\", \"H4 79-92\") %>%    str_replace_all(\"H1_1_35\", \"H1 1-35\") %>%    str_replace_all(\"H1_54_81\", \"H1 54-71\") %>%    str_replace_all(\"H2A1_36_42\", \"H2A1 36-42\") %>%    str_replace_all(\"H2A3_36_42\", \"H2A3 36-42\") %>%    str_replace_all(\"H2AX_36_42\", \"H2AX 36-42\") %>%    str_replace_all(\"H2A1_4_11\", \"H2A1 4-11\") %>%    str_replace_all(\"H2AJ_4_11\", \"H2AJ 4-11\") %>%    str_replace_all(\"H2AX_4_11\", \"H2AX 4-11\") %>%    str_replace_all(\"H2A1_1_11\", \"H2A1 1-11\") %>%    str_replace_all(\"H2AV_1_19\", \"H2AV 1-19\") %>%    str_replace_all(\"H2AZ_1_19\", \"H2AZ 1-19\") %>%    str_replace_all(\"H2A1_12_17\", \"H2A1 12-17\") %>%    str_replace_all(\"H2A3_12_17\", \"H2A3 12-17\") %>%    str_replace_all(\"H2A1_72_77\", \"H2A1 72-77\") %>%    str_replace_all(\"H2A_82_88\", \"H2A 82-88\") %>%    str_replace_all(\"H2A_1_88\", \"H2A 1-88\") %>%    str_replace_all(\"H2B_1_29\", \"H2B 1-29\")"},{"path":"https://zoe-schaefer.github.io/MPOInt/articles/BCG_case.html","id":"individual-values","dir":"Articles","previous_headings":"3. Histone processing","what":"3.1. Individual values","title":"BCG case","text":"separate histone fragments containing co-occurring PTMs individual PTMs present individually. allows discovery complexes require two targets, also provides clear picture overall PTM changes. , group two conditions together, marked columns start “” infected cells “C” control.","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/articles/BCG_case.html","id":"fragments","dir":"Articles","previous_headings":"3. Histone processing > 3.1. Individual values","what":"3.1.1. Fragments","title":"BCG case","text":"volcano_epi() function plots epiproteome data, assuming values already transformed statistical analysis already performed. address infinite fold change values appear protein detected one condition, also sets unique shape final plot assigns fold change value equal 2.5 times maximum valid value.","code":"# Group two conditions together histone_frag <- histone_frag_raw histone_frag <- histone_frag %>%   relocate(contains(\"I\"), .after = last_col()) %>%    relocate(\"PTM\")  # Calculate infected/control fold change and P value histone_frag <- histone_frag %>%    rowwise() %>%    mutate(c_mean = mean(c_across(\"C1\":\"C5\")),          i_mean = mean(c_across(\"I1\":\"I5\")),          FC = c_across(i_mean)/c_across(c_mean),          \"log2(FC)\" = log2(FC),          is_constant = all(c_across(\"C1\":\"C5\") == c_across(\"I1\":\"I5\")))  histone_frag <- column_to_rownames(histone_frag, var = \"PTM\") histone_frag$PTM <- rownames(histone_frag)  histone_frag$\"P value\" <- NA histone_p <- histone_frag %>%    rowwise() %>%    filter(is_constant == FALSE) %>%    # Removing any proteins that have all equal values, which gives an    # error when running t.test()   mutate(\"P value\" = t.test(c_across(\"C1\":\"C5\"), c_across(\"I1\":\"I5\"),          alternative = \"two.sided\", var.equal = TRUE)$p.value)  histone_frag <- full_join(histone_frag, histone_p) #> Joining with `by = join_by(C1, C2, C3, C4, C5, I1, I2, I3, I4, I5, c_mean, #> i_mean, FC, `log2(FC)`, is_constant, PTM, `P value`)`  histone_frag$`log2(FC)`[histone_frag$`log2(FC)` == \"NaN\"] <- NA histone_frag$FC[histone_frag$FC == \"NaN\"] <- NA # Setting this value - geom_text_repel will only show so many labels at once # for legibility reasons. Adjust this threshold to show more/fewer points. options(\"ggrepel.max.overlaps\" = 20)  volcano_epi(df = histone_frag, fc_col = \"log2(FC)\",             p_col = \"P value\", label_col = \"PTM\") +   labs(title = \"Volcano plot\", x = \"log2(FC)\", y = \"-log10(P-value)\") #> Joining with `by = join_by(C1, C2, C3, C4, C5, I1, I2, I3, I4, I5, c_mean, #> i_mean, FC, `log2(FC)`, is_constant, PTM, `P value`, shape_col, x_col, p_raw, #> p_log10, DiffExp, labels)`"},{"path":"https://zoe-schaefer.github.io/MPOInt/articles/BCG_case.html","id":"single","dir":"Articles","previous_headings":"3. Histone processing > 3.1. Individual values","what":"3.1.2. Single","title":"BCG case","text":"section parses fragments single PTMs. occurrence counted individually - example, H4 4-17 K5acK12acK16ac counted H4K5ac, H4K8ac, H4K16ac.","code":"# warnings silenced - multiple warnings come up if a regex string is empty histone_single_raw <- histone_frag_raw histone_single_raw <- histone_single_raw[!grepl(\"\\\\.\", histone_single_raw$PTM),] histone_single_unmod <- histone_single_raw[grepl(\"unmod\", histone_single_raw$PTM),] histone_single_raw <- histone_single_raw[!grepl(\"unmod\", histone_single_raw$PTM),]  histone_single_raw <- histone_single_raw %>%    mutate(\"subset\" = str_extract(`PTM`, \"([^\\ ]+$)\")) %>%    mutate(\"PTM4\" = str_split_i(`subset`, \"(?=K)\", i = -1)) %>%    mutate(\"PTM3\" = str_split_i(`subset`, \"(?=K)\", i = -2)) %>%    mutate(\"PTM2\" = str_split_i(`subset`, \"(?=K)\", i = -3)) %>%    # add line above for max co-occurring PTMs, then remove   mutate(\"PTM1\" = str_remove(`subset`, `PTM2`)) %>%    mutate(\"PTM1\" = str_remove(`PTM1`, `PTM3`)) %>%    mutate(\"PTM1\" = str_remove(`PTM1`, `PTM4`))  histone_single_raw <- replace(histone_single_raw, histone_single_raw == \"\", NA)  histone_single_long <- histone_single_raw %>%    pivot_longer(cols = c(\"PTM4\", \"PTM3\", \"PTM2\", \"PTM1\"), names_to = NULL,                values_to = \"single_PTM\", values_drop_na = TRUE) %>%    mutate(\"PTM\" = str_remove(`PTM`, `subset`)) %>%    unite(col = \"PTM\", c(`PTM`, `single_PTM`), sep = \" \", remove = TRUE) %>%    mutate(\"PTM\" = str_squish(PTM))  histone_single_long$PTM <- str_remove(histone_single_long$PTM, \" .+ \") %>%    str_replace(\"me1\", \"me\") histone_single_long <- bind_rows(histone_single_long, histone_single_unmod) histone_single_long_p <- histone_single_long %>%    group_by(`PTM`) %>%    summarize(\"C1\" = mean(C1), \"C2\" = mean(C2), \"C3\" = mean(C3),             \"C4\" = mean(C4), \"C5\" = mean(C5), \"I1\" = mean(I1),             \"I2\" = mean(I2), \"I3\" = mean(I3), \"I4\" = mean(I4),             \"I5\" = mean(I5))  # Calculate infected/control fold change and P value histone_single_p <- histone_single_long_p %>%    rowwise() %>%    mutate(c_mean = mean(c_across(\"C1\":\"C5\")),          i_mean = mean(c_across(\"I1\":\"I5\")),          FC = c_across(i_mean)/c_across(c_mean),          \"log2(FC)\" = log2(FC),          is_constant = all(c_across(\"C1\":\"C5\") == c_across(\"I1\":\"I5\")))  histone_single_p <- column_to_rownames(histone_single_p, var = \"PTM\") histone_single_p$PTM <- rownames(histone_single_p)  histone_single_p$\"P value\" <- NA single_p <- histone_single_p %>%    rowwise() %>%    filter(is_constant == FALSE) %>%    # Removing any proteins that have all equal values, which gives an    # error when running t.test()   mutate(\"P value\" = t.test(c_across(\"C1\":\"C5\"), c_across(\"I1\":\"I5\"),          alternative = \"two.sided\", var.equal = TRUE)$p.value)  histone_single_p <- full_join(histone_single_p, single_p) #> Joining with `by = join_by(C1, C2, C3, C4, C5, I1, I2, I3, I4, I5, c_mean, #> i_mean, FC, `log2(FC)`, is_constant, PTM, `P value`)`  histone_single_p$`log2(FC)`[histone_single_p$`log2(FC)` == \"NaN\"] <- NA histone_single_p$FC[histone_single_p$FC == \"NaN\"] <- NA # Setting this value - geom_text_repel will only show so many labels at once # for legibility reasons. Adjust this threshold to show more/fewer points. options(\"ggrepel.max.overlaps\" = 20)  volcano_epi(df = histone_single_p, fc_col = \"log2(FC)\",             p_col = \"P value\", label_col = \"PTM\") +   labs(title = \"Volcano plot\", x = \"log2(FC)\", y = \"-log10(P-value)\") #> Joining with `by = join_by(C1, C2, C3, C4, C5, I1, I2, I3, I4, I5, c_mean, #> i_mean, FC, `log2(FC)`, is_constant, PTM, `P value`, shape_col, x_col, p_raw, #> p_log10, DiffExp, labels)` # Clearing large variables rm(THP1_histones, histone_frag, histone_frag_raw, histone_p,    histone_single_long, histone_single_long_p, histone_single_raw,    histone_single_unmod, single_p)"},{"path":"https://zoe-schaefer.github.io/MPOInt/articles/BCG_case.html","id":"disease-enrichment","dir":"Articles","previous_headings":"","what":"4. Disease enrichment","title":"BCG case","text":"perform disease enrichment using MSigDB database MSigDBR package. First, identify dataset interest database. next chunk shows databases sourced MSigDB originating WikiPathways, Human Phenotype Ontology, Reactome. collection parameter identifies MSigDB collection search, followed gs_exact_source specifies selected dataset. can also replaced gs_id using “Systematic name” value website. enrich primary disease interest (bladder cancer), also include enrichment melanoma RSV, two potential areas BCG application. chunk creates Venn diagrams overlap proteins significant fold change threshold total proteome phosphoproteome, well genes interest just retrieved.    next print list proteins four intersecting areas investigation disease interest. NMIBC/Phospho: BRAF, NRAS, RAF1, RB1, TYMP NMIBC/Total: MMP9, TYMP Total/Phospho: ACOX1, ACSL1, ALDH2, ANKZF1, ATG16L1, BST2, CHMP7, CMPK2, CNP, DDI2, DERL1, DTX3L, EIF2AK2, EMILIN2, EYA3, FKBP8, FTL, GBP1, GRN, HELZ2, HMBS, HMOX1, ICAM1, IFI16, IFI44, IFIH1, IFIT1, IFIT2, IFIT3, INPP5F, ISG15, LIPA, LSM3, LYSMD2, MAT2B, MBD3, MOB1B, MTMR2, MX1, MX2, NAGK, NUP37, OAS1, OAS3, OASL, OSBPL11, PARP14, PEA15, PKIB, PML, PNPT1, PPP1R18, RAB13, RAP2C, RBBP6, RIGI, RNF213, RRM1, RSAD2, RTN1, SAMD9, SEPHS1, SERPINB1, SIRPA, SIRT2, SLFN5, SNRPB, SNRPG, SRSF10, STAT1, STAT2, STRADA, SULT1A1, TAP1, TAP2, TAPBP, TOR1AIP2, TUBA1A, TYMP, UBE2D3, UBE2L6, VKORC1 NMIBC/Phospho/Total: TYMP Melanoma/Phospho: ACD, ANAPC1, BAP1, BARD1, BRAF, BRCA1, CHEK2, KANSL1, MITF, NRAS, PALB2, RABL3, RAF1, RECQL4, STK11, TERF2IP, ZEB2 Melanoma/Total: Melanoma/Phospho: ACOX1, ACSL1, ALDH2, ANKZF1, ATG16L1, BST2, CHMP7, CMPK2, CNP, DDI2, DERL1, DTX3L, EIF2AK2, EMILIN2, EYA3, FKBP8, FTL, GBP1, GRN, HELZ2, HMBS, HMOX1, ICAM1, IFI16, IFI44, IFIH1, IFIT1, IFIT2, IFIT3, INPP5F, ISG15, LIPA, LSM3, LYSMD2, MAT2B, MBD3, MOB1B, MTMR2, MX1, MX2, NAGK, NUP37, OAS1, OAS3, OASL, OSBPL11, PARP14, PEA15, PKIB, PML, PNPT1, PPP1R18, RAB13, RAP2C, RBBP6, RIGI, RNF213, RRM1, RSAD2, RTN1, SAMD9, SEPHS1, SERPINB1, SIRPA, SIRT2, SLFN5, SNRPB, SNRPG, SRSF10, STAT1, STAT2, STRADA, SULT1A1, TAP1, TAP2, TAPBP, TOR1AIP2, TUBA1A, TYMP, UBE2D3, UBE2L6, VKORC1 Melanoma/Phospho/Total: RSV/Phospho: CUL5, EIF2AK2, ELOC, EP300, IFIH1, ISG15, MAP1B, MED1, MED12, MED26, RIGI, STAT2, TRIM25, UBE2L6 RSV/Total: CD14, EIF2AK2, IFIH1, ISG15, OAS2, RIGI, STAT2, TLR2, UBE2L6 Total/Phospho: ACOX1, ACSL1, ALDH2, ANKZF1, ATG16L1, BST2, CHMP7, CMPK2, CNP, DDI2, DERL1, DTX3L, EIF2AK2, EMILIN2, EYA3, FKBP8, FTL, GBP1, GRN, HELZ2, HMBS, HMOX1, ICAM1, IFI16, IFI44, IFIH1, IFIT1, IFIT2, IFIT3, INPP5F, ISG15, LIPA, LSM3, LYSMD2, MAT2B, MBD3, MOB1B, MTMR2, MX1, MX2, NAGK, NUP37, OAS1, OAS3, OASL, OSBPL11, PARP14, PEA15, PKIB, PML, PNPT1, PPP1R18, RAB13, RAP2C, RBBP6, RIGI, RNF213, RRM1, RSAD2, RTN1, SAMD9, SEPHS1, SERPINB1, SIRPA, SIRT2, SLFN5, SNRPB, SNRPG, SRSF10, STAT1, STAT2, STRADA, SULT1A1, TAP1, TAP2, TAPBP, TOR1AIP2, TUBA1A, TYMP, UBE2D3, UBE2L6, VKORC1 RSV/Phospho/Total: EIF2AK2, IFIH1, ISG15, RIGI, STAT2, UBE2L6","code":"GDA_BlCa <- msigdbr(collection = \"C2\") %>% filter(gs_exact_source == \"WP2828\") GDA_melanoma <- msigdbr(collection = \"C5\") %>% filter(gs_exact_source == \"HP:0002861\") GDA_RSV <- msigdbr(collection = \"C2\") %>% filter(gs_exact_source == \"R-HSA-9833110\") # Get lists of proteins that were significant AND above the FC threshold total_FC <- filter(THP1_total_sig, abs(`log2(FC)`) > total_FC_threshold) phospho_FC <- filter(THP1_phospho_sig, abs(`log2(FC)`) > phospho_FC_threshold)  # Generate plot ggvenn(list(   \"NMIBC\" = GDA_BlCa$gene_symbol,   \"Total proteome\" = total_FC$SYMBOL2,   \"Phosphoproteome\" = phospho_FC$SYMBOL2),   fill_color = c(\"#440154\", \"#21908C\", \"#FDE725\"),   show_percentage = FALSE, text_size = 5) + ggtitle(\"BCG enrichment\") + theme(   plot.title.position = \"plot\",   plot.title = element_text(hjust = 0.5)) ggvenn(list(   \"Melanoma\" = GDA_melanoma$gene_symbol,   \"Total proteome\" = total_FC$SYMBOL2,   \"Phosphoproteome\" = phospho_FC$SYMBOL2),   fill_color = c(\"#440154\", \"#21908C\", \"#FDE725\"),   show_percentage = FALSE, text_size = 5) + ggtitle(\"BCG enrichment\") + theme(   plot.title.position = \"plot\",   plot.title = element_text(hjust = 0.5)) ggvenn(list(   \"RSV\" = GDA_RSV$gene_symbol,   \"Total proteome\" = total_FC$SYMBOL2,   \"Phosphoproteome\" = phospho_FC$SYMBOL2),   fill_color = c(\"#440154\", \"#21908C\", \"#FDE725\"),   show_percentage = FALSE, text_size = 5) + ggtitle(\"BCG enrichment\") + theme(   plot.title.position = \"plot\",   plot.title = element_text(hjust = 0.5)) # Print the list of proteins in each intersection cat(paste(\"**NMIBC/Phospho:** \", paste(sort(intersect(GDA_BlCa$gene_symbol, phospho_FC$SYMBOL2)), collapse = \", \"))) cat(paste(\"**NMIBC/Total:** \", paste(sort(intersect(GDA_BlCa$gene_symbol, total_FC$SYMBOL2)), collapse = \", \"))) cat(paste(\"**Total/Phospho:** \", paste(sort(intersect(total_FC$SYMBOL2, phospho_FC$SYMBOL2)), collapse = \", \"))) cat(paste(\"**NMIBC/Phospho/Total:** \", paste(sort(intersect(intersect(GDA_BlCa$gene_symbol, phospho_FC$SYMBOL2), total_FC$SYMBOL2)), collapse = \", \"))) cat(paste(\"**Melanoma/Phospho:** \", paste(sort(intersect(GDA_melanoma$gene_symbol, phospho_FC$SYMBOL2)), collapse = \", \"))) cat(paste(\"**Melanoma/Total:** \", paste(sort(intersect(GDA_melanoma$gene_symbol, total_FC$SYMBOL2)), collapse = \", \"))) cat(paste(\"**Melanoma/Phospho:** \", paste(sort(intersect(total_FC$SYMBOL2, phospho_FC$SYMBOL2)), collapse = \", \"))) cat(paste(\"**Melanoma/Phospho/Total:** \", paste(sort(intersect(intersect(GDA_melanoma$gene_symbol, phospho_FC$SYMBOL2), total_FC$SYMBOL2)), collapse = \", \"))) cat(paste(\"**RSV/Phospho:** \", paste(sort(intersect(GDA_RSV$gene_symbol, phospho_FC$SYMBOL2)), collapse = \", \"))) cat(paste(\"**RSV/Total:** \", paste(sort(intersect(GDA_RSV$gene_symbol, total_FC$SYMBOL2)), collapse = \", \"))) cat(paste(\"**Total/Phospho:** \", paste(sort(intersect(total_FC$SYMBOL2, phospho_FC$SYMBOL2)), collapse = \", \"))) cat(paste(\"**RSV/Phospho/Total:** \", paste(sort(intersect(intersect(GDA_RSV$gene_symbol, phospho_FC$SYMBOL2), total_FC$SYMBOL2)), collapse = \", \"))) # Clearing large variables rm(GDA_BlCa, GDA_melanoma, GDA_RSV)"},{"path":"https://zoe-schaefer.github.io/MPOInt/articles/BCG_case.html","id":"epigenetic-network","dir":"Articles","previous_headings":"","what":"5. Epigenetic network","title":"BCG case","text":"section develops network visualization epigenetic interactions defined EpiFactors (https://epifactors.autosome.org/). Increased dataset size may make networks difficult visualize, interactive network drawn Python rendered embedded HTML file. data(genes) call imports .csv file included MPOInt package, can replaced update change database downloading importing “Table proteins” file EpiFactors website.   alternative visualization shows members identified complexes without connections. ## 5.1 Complex member identification future research use, generate multiple tables containing identified complexes, members, common targets, identified PTMs. Networked Complexes: ATAC, BAF, BCOR, BRCA1-, BRCC, CAF-1, CHD8, COMPASS, COMPASS-like MLL1,2, COMPASS-like MLL3,4, Menin-associated_HMT, MLL-HCF, MLL2/3, MLL4/WBP7, nBAF, npBAF, NSL, NuA4, NuRD, PBAF, PPP4C-PPP4R2-PPP4R3A, PR-DUB, PRC1, PRC2, RING2-FBRS, RING2-L3MBTL2, SWI/SNF BRM-BRG1, SWI/SNF-like EPAFB, SWI/SNF-like_EPAFa, WINAC","code":"data(genes) total_join <- inner_join(genes, dplyr::select(THP1_total_sig, \"log2(FC)\", \"P value\", \"SYMBOL2\"), by = join_by(\"HGNC approved symbol\" == \"SYMBOL2\"), multiple = \"any\") %>%    mutate(\"Source\" = \"Total\")  phospho_join <- inner_join(genes, dplyr::select(THP1_phospho_sig, \"log2(FC)\", \"P value\", \"SYMBOL2\"), by = join_by(\"HGNC approved symbol\" == \"SYMBOL2\"), multiple = \"any\") %>%    mutate(\"Source\" = \"Phospho\")  joined_data <- full_join(total_join, phospho_join) #> Joining with `by = join_by(`HGNC approved symbol`, `UniProt ID (human)`, #> Function, Modification, `Protein complex`, `Target entity`, Product, #> `log2(FC)`, `P value`, Source)`  # Assigning differential expression identifiers joined_data$Diff <- case_when(joined_data$`log2(FC)` > 0 ~ \"Up\",                              joined_data$`log2(FC)` < 0 ~ \"Down\") # Plotting all relevant proteins from the two combined datasets ggplot(joined_data, aes(x = `log2(FC)`, y = -log10(`P value`))) +   geom_point(aes(color = Source)) +   geom_vline(xintercept = c(total_FC_threshold, -total_FC_threshold),              alpha = 0.5, linetype = \"dashed\") +   geom_hline(yintercept = -log10(total_p_threshold),              alpha = 0.5, linetype = \"dashed\") +   labs(x = \"log2(Fold Change)\", y = \"-log10(P value)\",        title = \"Combined data\") +   geom_text_repel(aes(label = `HGNC approved symbol`), show.legend = FALSE,                   size = rel(3), max.overlaps = 20) +   theme(legend.position = \"bottom\") #> Warning: ggrepel: 100 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps # Formatting histone targets targets <- str_replace_all(str_flatten_comma(str_unique(c(joined_data$Product, joined_data$`Target entity`))), \", \", \"|\")  # Filter by that list total_histone_int <- filter(histone_single_p, grepl(targets, PTM)) total_histone_int$Diff <- case_when(total_histone_int$`log2(FC)` > 0 ~ \"Up\",                              total_histone_int$`log2(FC)` < 0 ~ \"Down\",                              .default = \"0\") total_histone_int <- filter(total_histone_int, !grepl(\"unmod\", PTM))  # Making sure that no histone data has gotten lost in processing -  # this should match the figure from the earlier section ggplot(total_histone_int, aes(x = `log2(FC)`, y = -log10(`P value`))) +   geom_point() +   geom_vline(xintercept = c(total_FC_threshold, -total_FC_threshold),              alpha = 0.5, linetype = \"dashed\") +   geom_hline(yintercept = -log10(total_p_threshold),              alpha = 0.5, linetype = \"dashed\") +   labs(x = \"log2(Fold Change)\", y = \"-log10(P value)\",        title = \"Included histone PTMs\") +   geom_text_repel(aes(label = PTM), show.legend = FALSE, size = rel(3)) +   theme(legend.position = \"bottom\") #> Warning: Removed 72 rows containing missing values or values outside the scale range #> (`geom_point()`). #> Warning: Removed 72 rows containing missing values or values outside the scale range #> (`geom_text_repel()`). #> Warning: ggrepel: 31 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps # Pivoting and formatting the gene list genes_pivoted <- dplyr::select(genes, c(\"HGNC approved symbol\", \"Protein complex\", \"Target entity\", \"Product\")) %>% dplyr::rename(\"Symbol\" = \"HGNC approved symbol\", \"Complex\" = \"Protein complex\", \"Target\" = \"Target entity\", \"Product\" = \"Product\")  genes_pivoted <- genes_pivoted %>%    separate_wider_delim(cols = c(\"Complex\", \"Target\", \"Product\"), delim = \", \",                        names_sep = \"_\", too_few = \"align_start\")  genes_pivoted <- genes_pivoted %>%    pivot_longer(cols = dplyr::starts_with(\"Complex\"), names_to = NULL,                values_to = \"Complex\", values_drop_na = TRUE) %>%    pivot_longer(cols = dplyr::starts_with(\"Target\"), names_to = NULL,                values_to = \"Target\", values_drop_na = TRUE) %>%    pivot_longer(cols = dplyr::starts_with(\"Product\"), names_to = NULL,                values_to = \"Product\", values_drop_na = TRUE)   genes_data_joined <- inner_join(genes_pivoted,                                 dplyr::select(joined_data, c(\"HGNC approved symbol\",                                                       \"log2(FC)\", \"P value\", \"Source\")),                                 by = join_by(\"Symbol\" == \"HGNC approved symbol\"),                                 relationship = \"many-to-many\") # Getting the lists into the right format for the igraph visualization genes_histone_pivoted <- pivot_longer(genes_data_joined, cols = c(\"Target\", \"Product\"), names_to = NULL,              values_to = \"PTM\") %>% distinct() genes_histone_pivoted$Diff <- case_when(genes_histone_pivoted$`log2(FC)` > 0 ~ \"Up\",                              genes_histone_pivoted$`log2(FC)` < 0 ~ \"Down\",                              .default = \"0\")  genes_histone_joined <- right_join(genes_histone_pivoted,                                 dplyr::select(total_histone_int, c(\"PTM\",                                                       \"log2(FC)\", \"P value\", \"Diff\")),                                 by = c(\"PTM\" = \"PTM\"), suffix = c(\"_gene\", \"_hist\"),                                 relationship = \"many-to-many\"                                 ) genes_histone_joined <- relocate(genes_histone_joined, Complex, .after = PTM)  # Ensuring no NA values remain, replacing \"#\" with a clearer identifier genes_histone_joined[genes_histone_joined == \"#\"] <- \"No ID\" genes_histone_joined$Complex <- genes_histone_joined$Complex %>%  replace_na(\"No ID\") # Generating a dataframe for edges and a dataframe for unique vertices with metadata complexes <- unique(genes_histone_joined$Complex) n_complexes <- seq(1, length(complexes)) complex_df <- data.frame(complexes, n_complexes)  # Ensuring all histone PTMs have the same complex and source labels histone_df <- dplyr::select(total_histone_int, c(\"PTM\", \"Diff\")) histone_df$Symbol <- histone_df$PTM histone_df$Complex <- \"No ID\" histone_df$Source <- \"Histone\"  vertices_df <- bind_rows(histone_df, dplyr::select(genes_histone_pivoted, !c(\"log2(FC)\", \"P value\"))) %>% relocate(\"Symbol\") vertices_df <- filter(vertices_df, grepl(\"^H\", PTM)) vertices_df$Complex <- case_when(vertices_df$Complex == \"#\" ~ \"No ID\",                             .default = vertices_df$Complex)  # Creating a dataframe connecting edges (source and target vertices) complex_vertices <- data.frame(vertices = c(unique(genes_histone_joined$Symbol), unique(genes_histone_joined$PTM))) edges_df <- full_join(genes_histone_joined, complex_df, by = join_by(\"Complex\" == \"complexes\")) %>% relocate(c(\"Symbol\", \"PTM\")) edges_df <- left_join(complex_vertices, edges_df, by = join_by(\"vertices\" == \"Symbol\")) %>% dplyr::rename(\"Symbol\" = \"vertices\")  edges_df$Symbol <- case_when(is.na(edges_df$Symbol) ~ edges_df$PTM,                                .default = edges_df$Symbol) edges_df$PTM <- case_when(is.na(edges_df$PTM) ~ edges_df$Symbol,                                .default = edges_df$PTM) edges_df$Source <- case_when(is.na(edges_df$Source) ~ \"Histone\",                                .default = edges_df$Source) edges_df$Complex <- case_when(is.na(edges_df$Complex) ~ \"No ID\",                                .default = edges_df$Complex) edges_df$Diff <- case_when(edges_df$Source == \"Histone\" ~ edges_df$Diff_hist,                              .default = edges_df$Diff_gene) edges_df <- drop_na(edges_df, Diff) sig_network <- distinct(group_by(filter(edges_df, Complex != \"No ID\"), Complex), Symbol, .keep_all = TRUE) sig_network[\"weight\"] <- 1 sig_network$Complex <- factor(sig_network$Complex, levels = unique(as.character(sig_network$Complex)))  ggplot(sig_network, aes(x = Complex, y = Symbol, fill = PTM)) +   geom_bin_2d(binwidth = 1, center = 0) +   theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1),         axis.title.x = element_blank(), axis.title.y = element_blank()) +   scale_fill_viridis_d() +   scale_y_discrete(limits = rev) +   labs(title = \"Network bins\") # Identified complexes final_complexes <- filter(vertices_df, vertices_df$Source != \"Histone\") %>% filter(Complex != \"No ID\") %>% drop_na() %>% distinct() final_complex_list <- sort(unique(final_complexes$Complex))  cat(paste(\"**Networked Complexes:** \", paste(final_complex_list, collapse = \", \"))) # List members of each final_members <- data.frame(\"Complex\" = \"\", \"Members\" = \"\", \"PTMs\" = \"\")  for (complex in final_complex_list) {   member_df <- filter(final_complexes, final_complexes$Complex == complex)   member_list <- paste0(unique(member_df$Symbol), collapse = \", \")   member_PTMs <- paste0(unique(member_df$PTM), collapse = \", \")   final_members <- final_members %>% add_row(\"Complex\" = complex, \"Members\" = member_list, \"PTMs\" = member_PTMs) }  knitr::kable(final_members) # Differential PTMs final_PTMs <- distinct(final_complexes, pick(PTM, Diff)) %>% dplyr::rename(\"Differential expression\" = \"Diff\") knitr::kable(final_PTMs) # Genes final_proteins <- unique(final_complexes$Symbol) final_func <- filter(genes, genes$`HGNC approved symbol` %in% final_proteins) %>% dplyr::select(!c(\"UniProt ID (human)\")) knitr::kable(final_func)"},{"path":"https://zoe-schaefer.github.io/MPOInt/articles/BCG_case.html","id":"python-visualization","dir":"Articles","previous_headings":"5. Epigenetic network","what":"5.2 Python visualization","title":"BCG case","text":"Finally, create interactive network using Python via reticulate package. allows dynamic visualization can refined filtered generate different views.","code":"vertices_df$Shapes <- case_when(vertices_df$Diff == \"Up\" ~ \"triangle\",                              vertices_df$Diff == \"Down\" ~ \"triangleDown\",                           vertices_df$Diff == \"0\" ~ \"ellipse\") vertices_df$Colors <- case_when(vertices_df$Source == \"Total\" ~ \"red\",                           vertices_df$Source == \"Phospho\" ~ \"blue\",                           vertices_df$Source == \"Histone\" ~ \"gray\")  sig_network_py <- filter(vertices_df, Complex != \"No ID\" | Source == \"Histone\") %>% r_to_py()  edges_py <- filter(edges_df, Complex != \"No ID\" | Source == \"Histone\") %>% r_to_py() import pandas as pd, networkx as nx from pyvis.network import Network # Create NetworkX graph object G = nx.Graph()  # Generate a nested dictionary/tuple with the node of interest (\"Symbol\") and  # the relevant attributes (shape and complex) node_list = [] for i, row in r.sig_network_py.iterrows():   node_list.append((row[\"Symbol\"], {\"color\": row.Colors, \"Complex\": row.Complex, \"shape\": row.Shapes})) G.add_nodes_from(node_list)  # Generate a tuple for edges connecting proteins with PTMs edge_tup = [] for i in range(len(r.edges_py[\"Symbol\"])):   edge_tup.append((r.edges_py[\"Symbol\"][i], r.edges_py[\"PTM\"][i])) G.add_edges_from(edge_tup)  # Remove self-loops G.remove_edges_from(nx.selfloop_edges(G))  # Now remove nodes without edges lone_nodes = [node for node, degree in G.degree() if degree == 0] G.remove_nodes_from(lone_nodes) # To change the parameters of what's being graphed, adjust the initial call to Network() net = Network(height=\"900px\", notebook = True, select_menu = True, cdn_resources = \"in_line\") net.from_nx(G) net.save_graph(\"networkx-pyvis-BCG.html\") htmltools::renderDocument(htmltools::htmlTemplate(\"networkx-pyvis-BCG.html\"))"},{"path":"https://zoe-schaefer.github.io/MPOInt/articles/MCF7_case.html","id":"proteome-data-processing","dir":"Articles","previous_headings":"","what":"1. Proteome data processing","title":"MCF7 case","text":"section prepares proteome data. data example, read data place data() call.","code":"data(MCF7_total) # Renaming to reader-friendly names not necessary here # Mapping ENTREZ and UNIPROT IDs already done # Dropping anything with an undefined or duplicate symbol MCF7_total <- MCF7_total %>%   tidyr::drop_na(SYMBOL2) %>%   dplyr::distinct(SYMBOL2, .keep_all = TRUE) # Assigning row names already done  # Creating a separate set of significant points for later analysis MCF7_total_sig <- dplyr::filter(MCF7_total, `P value` < total_p_threshold)"},{"path":"https://zoe-schaefer.github.io/MPOInt/articles/MCF7_case.html","id":"volcano-plots","dir":"Articles","previous_headings":"1. Proteome data processing","what":"1.1. Volcano plots","title":"MCF7 case","text":"create several volcano plots show data.  known proteins interest, use volcano_groups() highlight graph.","code":"# Setting this value - geom_text_repel will only show so many labels at once # for legibility reasons. Adjust this threshold to show more/fewer points. options(\"ggrepel.max.overlaps\" = 20)  volcanoplot(df = MCF7_total, fc_col = \"log2(FC)\",             p_col = \"P value\", label_col = \"SYMBOL2\") +   ggtitle(\"Volcano plot\") + xlab(\"log2(FC)\") + ylab(\"-log10(P-value)\") #> Warning: ggrepel: 1611 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps # For known groups of interest volcano_groups(df = MCF7_total, fc_col = \"log2(FC)\", p_col = \"P value\", label_col = \"SYMBOL2\",   group_list = list(\"Group 1\" = c(\"TP53\", \"KMT2C\", \"NCOR1\", \"ARID1A\", \"SPEN\", \"FOXA1\", \"KMT2D\", \"KMT2A\", \"ATRX\", \"UBR5\", \"BRCA2\", \"RB1\", \"CHD4\", \"ATM\", \"SETD2\", \"CTCF\"), \"Group 2\" = c(\"PIK3CA\", \"CDH1\", \"GATA3\", \"MUC16\", \"MAP3K1\", \"PTEN\", \"MAP2K4\", \"FAT3\", \"CSMD3\", \"NF1\", \"RUNX1\", \"TBX3\", \"FAT1\", \"AKAP9\", \"LRP1B\", \"MYH9\", \"BIRC6\", \"CBFB\", \"AKT1\", \"PIK3R1\", \"PTPRD\", \"ERBB2\", \"PREX2\", \"FAT4\", \"MUC4\", \"MED12\", \"RNF213\", \"NOTCH2\", \"FLNA\", \"ZFHX3\", \"ERBB3\", \"MTOR\", \"ANK1\", \"PTPRB\"))) +   scale_color_manual(values = c(\"Group 1\" = \"red\", \"Group 2\" = \"blue\", \"None\" = \"gray\")) +   ggtitle(\"Grouped volcano plot\") + xlab(\"log2FC\") + ylab(\"-log10P\") #> Warning: ggrepel: 19 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps"},{"path":"https://zoe-schaefer.github.io/MPOInt/articles/MCF7_case.html","id":"gsea","dir":"Articles","previous_headings":"1. Proteome data processing","what":"1.2. GSEA","title":"MCF7 case","text":"section prepares performs GSEA analysis total proteome data. Plotting GSEA dot plots can difficult due volume information included. Changing value label_format adjusts label wrapping, can help crowded figures.","code":"# Need a named list in decreasing order total_GSEA_list <- MCF7_total$`log2(FC)` names(total_GSEA_list) <- MCF7_total$ENTREZID total_GSEA_list <- na.omit(total_GSEA_list) total_GSEA_list <- sort(total_GSEA_list, decreasing = TRUE) total_GSEA_GO <- gseGO(geneList = total_GSEA_list, OrgDb = \"org.Hs.eg.db\",                     verbose = FALSE, ont = \"ALL\") #> Warning in preparePathwaysAndStats(pathways, stats, minSize, maxSize, gseaParam, : There are ties in the preranked stats (0.66% of the list). #> The order of those tied genes will be arbitrary, which may produce unexpected results. #> Warning in fgseaMultilevel(pathways = pathways, stats = stats, minSize = #> minSize, : For some of the pathways the P-values were likely overestimated. For #> such pathways log2err is set to NA. #> Warning in fgseaMultilevel(pathways = pathways, stats = stats, minSize = #> minSize, : For some pathways, in reality P-values are less than 1e-10. You can #> set the `eps` argument to zero for better estimation. # By visual inspection, this contains overlapping terms simple_total_GSEA_GO <- clusterProfiler::simplify(total_GSEA_GO) total_GSEA_KEGG <- gseKEGG(geneList = total_GSEA_list, verbose = FALSE) #> Reading KEGG annotation online: \"https://rest.kegg.jp/link/hsa/pathway\"... #> Reading KEGG annotation online: \"https://rest.kegg.jp/list/pathway/hsa\"... #> Warning in preparePathwaysAndStats(pathways, stats, minSize, maxSize, gseaParam, : There are ties in the preranked stats (0.66% of the list). #> The order of those tied genes will be arbitrary, which may produce unexpected results. if (nrow(total_GSEA_GO@result) > 0) {   dotplot(total_GSEA_GO, showCategory = 20, font.size = rel(1), label_format = 40, title = \"GO enrichment\",           split = \"ONTOLOGY\") + facet_wrap(ONTOLOGY~.sign, scales = \"free_y\", ncol = 2) } else {   print(\"Error: no terms enriched under P-value cutoff (total_GSEA_GO)\") } if (nrow(simple_total_GSEA_GO@result) > 0) {   dotplot(simple_total_GSEA_GO, showCategory = 20, font.size = rel(1), label_format = 40, title = \"Simplified GO enrichment\",           split = \"ONTOLOGY\") + facet_wrap(ONTOLOGY~.sign, scales = \"free_y\", ncol = 2) } else {   print(\"Error: no terms enriched under P-value cutoff (simple_total_GSEA_GO)\") } if (nrow(total_GSEA_KEGG@result) > 0) {   dotplot(total_GSEA_KEGG, showCategory = 20, font.size = rel(1), label_format = 40, title = \"KEGG enrichment\",           split = \".sign\") + facet_wrap(.~.sign) } else {   print(\"Error: no terms enriched under P-value cutoff (total_GSEA_KEGG)\") } # Clearing large variables rm(MCF7_total, total_GSEA_GO, simple_total_GSEA_GO, total_GSEA_KEGG, total_GSEA_list)"},{"path":"https://zoe-schaefer.github.io/MPOInt/articles/MCF7_case.html","id":"phosphoproteome-data-processing","dir":"Articles","previous_headings":"","what":"2. Phosphoproteome data processing","title":"MCF7 case","text":"Similar previous section, prepares phosphoproteome data.","code":"# Renaming to reader-friendly names not necessary here data(MCF7_phospho) # Mapping ENTREZ IDs and a gene symbol column to UniProt IDs for later analysis MCF7_phospho <- dplyr::left_join(MCF7_phospho, OrganismDbi::select(   Homo.sapiens::Homo.sapiens,   keys = OrganismDbi::keys(Homo.sapiens::Homo.sapiens, keytype = \"ENTREZID\"),   columns = c(\"UNIPROT\", \"SYMBOL\"), keytype = \"ENTREZID\" ), by = dplyr::join_by(SYMBOL2 == SYMBOL, ENTREZID), keep = FALSE, relationship = \"many-to-many\") #> 'select()' returned 1:many mapping between keys and columns # Dropping anything with an undefined or duplicate symbol MCF7_phospho <- MCF7_phospho %>%   tidyr::drop_na(SYMBOL2) %>%   dplyr::distinct(SYMBOL2, .keep_all = TRUE) # Assigning row names MCF7_phospho <- MCF7_phospho %>%   dplyr::mutate(\"SYMBOL\" = `SYMBOL2`) %>%   tibble::column_to_rownames(var = \"SYMBOL\")  # Creating a separate set of significant points for later analysis MCF7_phospho_sig <- dplyr::filter(MCF7_phospho, `P value` < phospho_p_threshold)"},{"path":"https://zoe-schaefer.github.io/MPOInt/articles/MCF7_case.html","id":"volcano-plots-1","dir":"Articles","previous_headings":"2. Phosphoproteome data processing","what":"2.1. Volcano plots","title":"MCF7 case","text":"","code":"# Setting this value - geom_text_repel will only show so many labels at once # for legibility reasons. Adjust this threshold to show more/fewer points. options(\"ggrepel.max.overlaps\" = 20)  volcanoplot(df = MCF7_phospho, fc_col = \"log2(FC)\",             p_col = \"P value\", label_col = \"SYMBOL2\") +   ggtitle(\"Volcano plot\") + xlab(\"log2(FC)\") + ylab(\"-log10(P-value)\") #> Warning: ggrepel: 1025 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps # For known groups of interest volcano_groups(df = MCF7_phospho, fc_col = \"log2(FC)\", p_col = \"P value\", label_col = \"SYMBOL2\",   group_list = list(\"Group 1\" = c(\"ASH2L\", \"ASXL1\", \"ASXL2\", \"BAP1\", \"BMI1\", \"CHD4\", \"EZH2\", \"DMAP1\",   \"EP400\", \"GATAD2B\", \"KANSL1\", \"KANSL3\", \"KMT2C\", \"KMT2D\", \"MBD3\",   \"MEN1\", \"MGA\", \"MRGBP\", \"MTA1\", \"NCOA6\", \"PHC2\", \"PHF20L1\", \"REST\",   \"RING1\", \"RUVBL1\", \"SAP130\", \"SCML2\", \"SIRT3\", \"SIRT6\", \"EP300\"), \"Group 2\" = c(\"FANCI\", \"CDK14\", \"PRDM1\", \"ICAM1\", \"CDK1\", \"RUNX3\", \"NOTCH3\", \"CASP8\",   \"BST2\", \"CTSL\", \"MX2\", \"CASP1\", \"STAT2\", \"MX1\"))) +   scale_color_manual(values = c(\"Group 1\" = \"red\", \"Group 2\" = \"blue\", \"None\" = \"gray\")) +   ggtitle(\"Grouped volcano plot\") + xlab(\"log2FC\") + ylab(\"-log10P\") #> Warning: ggrepel: 6 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps"},{"path":"https://zoe-schaefer.github.io/MPOInt/articles/MCF7_case.html","id":"gsea-1","dir":"Articles","previous_headings":"2. Phosphoproteome data processing","what":"2.2. GSEA","title":"MCF7 case","text":"","code":"# Need a named list in decreasing order MCF7_phospho <- drop_na(MCF7_phospho, ENTREZID) %>% distinct(ENTREZID, .keep_all = TRUE) phospho_GSEA_list <- MCF7_phospho$`log2(FC)` names(phospho_GSEA_list) <- MCF7_phospho$ENTREZID phospho_GSEA_list <- sort(phospho_GSEA_list, decreasing = TRUE) phospho_GSEA_GO <- gseGO(geneList = phospho_GSEA_list, OrgDb = \"org.Hs.eg.db\",                     verbose = FALSE, ont = \"ALL\") phospho_GSEA_KEGG <- gseKEGG(geneList = phospho_GSEA_list, verbose = FALSE) #> no term enriched under specific pvalueCutoff... if (nrow(phospho_GSEA_GO@result) > 0) {   dotplot(phospho_GSEA_GO, showCategory = 20, font.size = rel(1), label_format = 50, title = \"GO enrichment\",           split = \"ONTOLOGY\") + facet_wrap(ONTOLOGY~.sign, scales = \"free_y\", ncol = 2) } else {   print(\"Error: no terms enriched under P-value cutoff (simple_phospho_GSEA_GO)\") } if (nrow(phospho_GSEA_KEGG@result) > 0) {   dotplot(phospho_GSEA_KEGG, showCategory = 20, font.size = rel(1), label_format = 40, title = \"KEGG enrichment\",           split = \".sign\") + facet_wrap(.~.sign, scales = \"free\", ncol = 2) } else {   print(\"Error: no terms enriched under P-value cutoff (phospho_GSEA_KEGG)\") } #> [1] \"Error: no terms enriched under P-value cutoff (phospho_GSEA_KEGG)\" # Clearing large variables rm(phospho_GSEA_GO, phospho_GSEA_KEGG, MCF7_phospho,    phospho_GSEA_list)"},{"path":"https://zoe-schaefer.github.io/MPOInt/articles/MCF7_case.html","id":"histone-processing","dir":"Articles","previous_headings":"","what":"3. Histone processing","title":"MCF7 case","text":"section processes EpiProfile output readable, user-friendly format. case, epiproteome data summary statistics format, condition presented mean value standard deviation. create standard baseline generate P value T score.","code":"data(MCF7_histones) histone_frag_raw <- MCF7_histones # Creating an overall baseline by averaging the non-cancer cell lines histone_frag_raw<- histone_frag_raw %>% mutate(\"avg std\" = apply(pick(\"293 ave (5 reps)\", \"HaCAT ave (5 reps)\",                                     \"hESC ave (6 reps)\", \"HFF ave (7 reps)\",                                     \"Mdm13 ave (5 reps)\"), 1, sd)) histone_frag_raw <- histone_frag_raw %>%    dplyr::select(c(\"PTM\", \"MCF7 ave (5 reps)\", \"MCF7 std\", \"ctrl ave\", \"avg std\")) %>%    mutate(\"log2(FC)\" = log2(`MCF7 ave (5 reps)`/`ctrl ave`)) %>%    mutate(\"T score\" = NA) %>%    mutate(\"P value\" = NA) histone_frag <- histone_frag_raw histone_frag <- histone_frag %>%   mutate(\"T score\" = (`MCF7 ave (5 reps)` - `ctrl ave`)/(`MCF7 std`/sqrt(5))) %>%    mutate(\"P value\" = pt(q = `T score`, df = 4))"},{"path":[]},{"path":"https://zoe-schaefer.github.io/MPOInt/articles/MCF7_case.html","id":"fragments","dir":"Articles","previous_headings":"3. Histone processing > 3.1. Individual values","what":"3.1.1. Fragments","title":"MCF7 case","text":"data available already legible format, process extensively.","code":"# Setting this value - geom_text_repel will only show so many labels at once # for legibility reasons. Adjust this threshold to show more/fewer points. options(\"ggrepel.max.overlaps\" = 20)  volcano_epi(df = histone_frag, fc_col = \"log2(FC)\",             p_col = \"P value\", label_col = \"PTM\") +   labs(title = \"Volcano plot\", x = \"log2(FC)\", y = \"-log10(P-value)\") #> Joining with `by = join_by(PTM, `MCF7 ave (5 reps)`, `MCF7 std`, `ctrl ave`, #> `avg std`, `log2(FC)`, `T score`, `P value`, x_col, p_raw, p_log10, DiffExp, #> labels)`"},{"path":"https://zoe-schaefer.github.io/MPOInt/articles/MCF7_case.html","id":"single","dir":"Articles","previous_headings":"3. Histone processing > 3.1. Individual values","what":"3.1.2. Single","title":"MCF7 case","text":"section parses fragments single PTMs. occurrence counted individually - example, H4 4-17 K5acK12acK16ac counted H4K5ac, H4K8ac, H4K16ac.","code":"# warnings silenced - multiple warnings come up if a regex string is empty histone_single_raw <- histone_frag_raw histone_single_raw <- histone_single_raw[!grepl(\"\\\\.\", histone_single_raw$PTM),] histone_single_unmod <- histone_single_raw[grepl(\"unmod\", histone_single_raw$PTM),] histone_single_raw <- histone_single_raw[!grepl(\"unmod\", histone_single_raw$PTM),]  histone_single_raw <- histone_single_raw %>%    mutate(\"subset\" = str_extract(`PTM`, \"([^\\ ]+$)\")) %>%    mutate(\"PTM4\" = str_split_i(`subset`, \"(?=K)\", i = -1)) %>%    mutate(\"PTM3\" = str_split_i(`subset`, \"(?=K)\", i = -2)) %>%    mutate(\"PTM2\" = str_split_i(`subset`, \"(?=K)\", i = -3)) %>%    # add line above for max co-occurring PTMs, then remove   mutate(\"PTM1\" = str_remove(`subset`, `PTM2`)) %>%    mutate(\"PTM1\" = str_remove(`PTM1`, `PTM3`)) %>%    mutate(\"PTM1\" = str_remove(`PTM1`, `PTM4`))  histone_single_raw <- replace(histone_single_raw, histone_single_raw == \"\", NA)  histone_single_long <- histone_single_raw %>%    pivot_longer(cols = c(\"PTM4\", \"PTM3\", \"PTM2\", \"PTM1\"), names_to = NULL,                values_to = \"single_PTM\", values_drop_na = TRUE) %>%    mutate(\"PTM\" = str_remove(`PTM`, `subset`)) %>%    unite(col = \"PTM\", c(`PTM`, `single_PTM`), sep = \" \", remove = TRUE) %>%    mutate(\"PTM\" = str_squish(PTM))  histone_single_long$PTM <- str_remove(histone_single_long$PTM, \" .+ \") %>%    str_replace(\"me1\", \"me\") histone_single_long <- bind_rows(histone_single_long, histone_single_unmod) histone_single_raw <- histone_single_long %>%    group_by(`PTM`) %>%    summarize(\"sample ave\" = mean(`MCF7 ave (5 reps)`),             \"sample std\" = mean(`MCF7 std`),             \"ctrl ave\" = mean(`ctrl ave`),             \"avg std\" = mean(`avg std`),             \"T score\" = \"\",             \"P value\" = \"\") %>%    mutate(\"log2(FC)\" = log2(`sample ave`/`ctrl ave`))  histone_single_p <- histone_single_raw %>%    mutate(\"T score\" = (`sample ave` - `ctrl ave`)/(`sample std`/sqrt(5))) %>%    mutate(\"P value\" = pt(q = `T score`, df = 4))  histone_single_p$PTM <- str_remove(histone_single_p$PTM, \" .+ \") %>%    str_remove(\"un\") %>%    str_replace(\"me1\", \"me\") # Clearing large variables rm(MCF7_histones, histone_frag, histone_frag_raw, histone_p,    histone_single_long, histone_single_long_p, histone_single_raw,    histone_single_unmod, single_p) #> Warning in rm(MCF7_histones, histone_frag, histone_frag_raw, histone_p, : #> object 'histone_p' not found #> Warning in rm(MCF7_histones, histone_frag, histone_frag_raw, histone_p, : #> object 'histone_single_long_p' not found #> Warning in rm(MCF7_histones, histone_frag, histone_frag_raw, histone_p, : #> object 'single_p' not found"},{"path":"https://zoe-schaefer.github.io/MPOInt/articles/MCF7_case.html","id":"disease-enrichment","dir":"Articles","previous_headings":"","what":"4. Disease enrichment","title":"MCF7 case","text":"perform disease enrichment using MSigDB database MSigDBR package. First, identify dataset interest database. next chunk shows databases sourced MSigDB originating PubMed Human Phenotype Ontology. collection parameter identifies MSigDB collection search, followed gs_exact_source specifies selected dataset. can also replaced gs_id using “Systematic name” value website. enrich primary disease interest (breast cancer), also include enrichment hypertension ovarian cancer. chunk creates Venn diagrams overlap proteins significant fold change threshold total phosphoproteome, well genes interest just retrieved.    next print list proteins four intersecting areas investigation disease interest. ER breast cancer/Phospho: AHNAK, KDM4B, MAGED2 ER breast cancer/Total: ANXA9, KDM4B, MAGED2, P4HTM Total/Phospho: AGPS, AHNAK2, AJUBA, AKAP13, AKT2, ALDOC, ALPI, ANKRD17, ANTXR1, APTX, ARHGAP29, ARHGEF18, ASH2L, ASPSCR1, ATP2B1, BAG3, BAIAP2, BAZ1B, BCKDHA, BCL3, BHLHE40, BIN1, BNIP3L, BRD9, BRSK2, BTRC, BUB1, C1orf131, CAMKK1, CCDC137, CCDC6, CCDC86, CCPG1, CCZ1, CD83, CDC20, CDC25C, CDC6, CDCA2, CDCA3, CDK18, CEP192, CEP85, CHAF1B, CHEK2, CHML, CIZ1, CLASP2, CLIP1, COPRS, COPS8, CORO7, CTDSPL, CTNNB1, CTTNBP2, CWC25, DAB2, DAG1, DAXX, DDB2, DDX1, DDX24, DDX47, DENND5B, DEPTOR, DIAPH1, DIAPH3, DICER1, DOCK10, DZIP3, EGLN1, EHBP1L1, EIF2AK1, EIF4EBP2, EIF4G2, ELAVL1, ENO2, EP400, EPB41, FAM199X, FARP2, FBXL20, FBXW9, FERMT2, FNTB, FUNDC2, GTPBP4, HBP1, HMGCS1, HSF1, IRS2, ITCH, IVNS1ABP, JAG2, JUNB, KCTD5, KDM2B, KDM3A, KDM4A, KDM4B, KIF20A, KIFAP3, KLF10, KLF13, KLHDC10, KLRG2, KRI1, L1CAM, LARP4, LATS2, LIG3, LPIN3, LRP1, LRRC41, MAF1, MAGED2, MAPK3, MCMBP, MELK, MET, MID1, MITF, MLXIP, MNAT1, MPHOSPH6, MRPL1, MYC, MYPN, NAP1L1, NBR1, NCAPD2, NCAPD3, NCKAP5L, NEIL2, NEMF, NFKB2, NOP2, NOTCH2, NUFIP1, NUFIP2, NXF1, NYAP2, OSBPL9, OSER1, OTUD5, PARP1, PAWR, PBXIP1, PDHA1, PDS5B, PHLDB1, PKP3, PLEKHO2, PLK1, PNPO, PPA2, PPP1R15B, PPP1R3G, PPP2R3A, PRDM1, PRDX6, PRR11, PRRC2B, PTGFRN, RAB3IL1, RABGGTB, RAD51AP1, RAD54B, RBM14, RBM15, RBM25, RBM4, RBM47, RBPJ, REEP4, REXO4, RFC1, RIOK1, RNF25, RNF4, RPL27A, RPL3, RPL31, RPS10, RPS3, RPS3A, RPUSD2, RRN3, SAMHD1, SDC1, SFMBT1, SHMT2, SKA3, SKP2, SLC1A5, SLC20A1, SLC4A2, SLC6A15, SMARCAD1, SMARCAL1, SMARCC2, SMG7, SNRK, SSR1, STBD1, STK17A, SURF2, TACC1, TANC2, TARDBP, TBC1D9B, TBL1XR1, TCF19, TCF3, TJP1, TJP3, TNRC6B, TOP1, TP53RK, TPPP, TPRN, TRAF1, TRAF7, TTC38, TTF2, TTK, UBAP2, UCK2, UHRF1, USP6NL, VDAC2, VEZF1, VIPAS39, VRK3, WWP2, XPC, XPO4, XRN2, YBX1, YBX3, YTHDF2, ZBTB38, ZDHHC20, ZFAND5, ZFAND6, ZKSCAN1, ZMYM1, ZNF185, ZNF22, ZNF576, ZNF691, ZNF800, ZNRF2, ZYX ER breast cancer/Phospho/Total: KDM4B, MAGED2 Hypertension/Phospho: BAZ1B, CTNNB1, ERCC6, FMR1, GNAS, GTF2I, INF2, JMJD1C, KDM1A, LDLRAP1, LIMK1, MED12, MEF2A, MTRR, MUC1, NOTCH2, REST, SMARCAL1, TSC1 Hypertension/Total: ACAT1, AIP, ALG9, ALMS1, ARVCF, BAZ1B, BICC1, BSCL2, CCND1, CDKN1B, CDKN2C, CEP83, CTNNB1, ENG, ETS1, EXT2, FIG4, H4C3, IFT27, IMPDH2, KIAA0319L, LDLR, LOX, MAX, MDH2, MECP2, NOTCH2, PCSK9, PLAAT3, PRKAR1A, PRNP, SCLT1, SDHA, SDHB, SMARCAL1, TGFBR2, TREX1, TRIM32, VANGL1, WNK1, YY1AP1, ZMPSTE24 Total/Phospho: AGPS, AHNAK2, AJUBA, AKAP13, AKT2, ALDOC, ALPI, ANKRD17, ANTXR1, APTX, ARHGAP29, ARHGEF18, ASH2L, ASPSCR1, ATP2B1, BAG3, BAIAP2, BAZ1B, BCKDHA, BCL3, BHLHE40, BIN1, BNIP3L, BRD9, BRSK2, BTRC, BUB1, C1orf131, CAMKK1, CCDC137, CCDC6, CCDC86, CCPG1, CCZ1, CD83, CDC20, CDC25C, CDC6, CDCA2, CDCA3, CDK18, CEP192, CEP85, CHAF1B, CHEK2, CHML, CIZ1, CLASP2, CLIP1, COPRS, COPS8, CORO7, CTDSPL, CTNNB1, CTTNBP2, CWC25, DAB2, DAG1, DAXX, DDB2, DDX1, DDX24, DDX47, DENND5B, DEPTOR, DIAPH1, DIAPH3, DICER1, DOCK10, DZIP3, EGLN1, EHBP1L1, EIF2AK1, EIF4EBP2, EIF4G2, ELAVL1, ENO2, EP400, EPB41, FAM199X, FARP2, FBXL20, FBXW9, FERMT2, FNTB, FUNDC2, GTPBP4, HBP1, HMGCS1, HSF1, IRS2, ITCH, IVNS1ABP, JAG2, JUNB, KCTD5, KDM2B, KDM3A, KDM4A, KDM4B, KIF20A, KIFAP3, KLF10, KLF13, KLHDC10, KLRG2, KRI1, L1CAM, LARP4, LATS2, LIG3, LPIN3, LRP1, LRRC41, MAF1, MAGED2, MAPK3, MCMBP, MELK, MET, MID1, MITF, MLXIP, MNAT1, MPHOSPH6, MRPL1, MYC, MYPN, NAP1L1, NBR1, NCAPD2, NCAPD3, NCKAP5L, NEIL2, NEMF, NFKB2, NOP2, NOTCH2, NUFIP1, NUFIP2, NXF1, NYAP2, OSBPL9, OSER1, OTUD5, PARP1, PAWR, PBXIP1, PDHA1, PDS5B, PHLDB1, PKP3, PLEKHO2, PLK1, PNPO, PPA2, PPP1R15B, PPP1R3G, PPP2R3A, PRDM1, PRDX6, PRR11, PRRC2B, PTGFRN, RAB3IL1, RABGGTB, RAD51AP1, RAD54B, RBM14, RBM15, RBM25, RBM4, RBM47, RBPJ, REEP4, REXO4, RFC1, RIOK1, RNF25, RNF4, RPL27A, RPL3, RPL31, RPS10, RPS3, RPS3A, RPUSD2, RRN3, SAMHD1, SDC1, SFMBT1, SHMT2, SKA3, SKP2, SLC1A5, SLC20A1, SLC4A2, SLC6A15, SMARCAD1, SMARCAL1, SMARCC2, SMG7, SNRK, SSR1, STBD1, STK17A, SURF2, TACC1, TANC2, TARDBP, TBC1D9B, TBL1XR1, TCF19, TCF3, TJP1, TJP3, TNRC6B, TOP1, TP53RK, TPPP, TPRN, TRAF1, TRAF7, TTC38, TTF2, TTK, UBAP2, UCK2, UHRF1, USP6NL, VDAC2, VEZF1, VIPAS39, VRK3, WWP2, XPC, XPO4, XRN2, YBX1, YBX3, YTHDF2, ZBTB38, ZDHHC20, ZFAND5, ZFAND6, ZKSCAN1, ZMYM1, ZNF185, ZNF22, ZNF576, ZNF691, ZNF800, ZNRF2, ZYX Hypertension/Phospho/Total: BAZ1B, CTNNB1, NOTCH2, SMARCAL1 Ovarian cancer/Phospho: BRCA1, CHEK2, CTNNB1, DICER1, MBD4, MSH6, PALB2, VAMP7 Ovarian cancer/Total: BRIP1, CHEK2, CTNNB1, DICER1, IDH2, KEAP1, MAP3K1, MLH1, PALLD, PRKAR1A, PTEN, RABL3, RAD51C, SUFU, TGFBR2 Total/Phospho: AGPS, AHNAK2, AJUBA, AKAP13, AKT2, ALDOC, ALPI, ANKRD17, ANTXR1, APTX, ARHGAP29, ARHGEF18, ASH2L, ASPSCR1, ATP2B1, BAG3, BAIAP2, BAZ1B, BCKDHA, BCL3, BHLHE40, BIN1, BNIP3L, BRD9, BRSK2, BTRC, BUB1, C1orf131, CAMKK1, CCDC137, CCDC6, CCDC86, CCPG1, CCZ1, CD83, CDC20, CDC25C, CDC6, CDCA2, CDCA3, CDK18, CEP192, CEP85, CHAF1B, CHEK2, CHML, CIZ1, CLASP2, CLIP1, COPRS, COPS8, CORO7, CTDSPL, CTNNB1, CTTNBP2, CWC25, DAB2, DAG1, DAXX, DDB2, DDX1, DDX24, DDX47, DENND5B, DEPTOR, DIAPH1, DIAPH3, DICER1, DOCK10, DZIP3, EGLN1, EHBP1L1, EIF2AK1, EIF4EBP2, EIF4G2, ELAVL1, ENO2, EP400, EPB41, FAM199X, FARP2, FBXL20, FBXW9, FERMT2, FNTB, FUNDC2, GTPBP4, HBP1, HMGCS1, HSF1, IRS2, ITCH, IVNS1ABP, JAG2, JUNB, KCTD5, KDM2B, KDM3A, KDM4A, KDM4B, KIF20A, KIFAP3, KLF10, KLF13, KLHDC10, KLRG2, KRI1, L1CAM, LARP4, LATS2, LIG3, LPIN3, LRP1, LRRC41, MAF1, MAGED2, MAPK3, MCMBP, MELK, MET, MID1, MITF, MLXIP, MNAT1, MPHOSPH6, MRPL1, MYC, MYPN, NAP1L1, NBR1, NCAPD2, NCAPD3, NCKAP5L, NEIL2, NEMF, NFKB2, NOP2, NOTCH2, NUFIP1, NUFIP2, NXF1, NYAP2, OSBPL9, OSER1, OTUD5, PARP1, PAWR, PBXIP1, PDHA1, PDS5B, PHLDB1, PKP3, PLEKHO2, PLK1, PNPO, PPA2, PPP1R15B, PPP1R3G, PPP2R3A, PRDM1, PRDX6, PRR11, PRRC2B, PTGFRN, RAB3IL1, RABGGTB, RAD51AP1, RAD54B, RBM14, RBM15, RBM25, RBM4, RBM47, RBPJ, REEP4, REXO4, RFC1, RIOK1, RNF25, RNF4, RPL27A, RPL3, RPL31, RPS10, RPS3, RPS3A, RPUSD2, RRN3, SAMHD1, SDC1, SFMBT1, SHMT2, SKA3, SKP2, SLC1A5, SLC20A1, SLC4A2, SLC6A15, SMARCAD1, SMARCAL1, SMARCC2, SMG7, SNRK, SSR1, STBD1, STK17A, SURF2, TACC1, TANC2, TARDBP, TBC1D9B, TBL1XR1, TCF19, TCF3, TJP1, TJP3, TNRC6B, TOP1, TP53RK, TPPP, TPRN, TRAF1, TRAF7, TTC38, TTF2, TTK, UBAP2, UCK2, UHRF1, USP6NL, VDAC2, VEZF1, VIPAS39, VRK3, WWP2, XPC, XPO4, XRN2, YBX1, YBX3, YTHDF2, ZBTB38, ZDHHC20, ZFAND5, ZFAND6, ZKSCAN1, ZMYM1, ZNF185, ZNF22, ZNF576, ZNF691, ZNF800, ZNRF2, ZYX Ovarian cancer/Phospho/Total: CHEK2, CTNNB1, DICER1","code":"GDA_ERBC <- msigdbr(collection = \"C2\") %>% filter(gs_id == \"M18299\") GDA_HT <- msigdbr(collection = \"C5\") %>% filter(gs_exact_source == \"HP:0000822\") GDA_OvCa <- msigdbr(collection = \"C5\") %>% filter(gs_exact_source == \"HP:0100615\") # Get lists of proteins that were significant AND above the FC threshold total_FC <- filter(MCF7_total_sig, abs(`log2(FC)`) > total_FC_threshold) phospho_FC <- filter(MCF7_phospho_sig, abs(`log2(FC)`) > phospho_FC_threshold)  # Generate plot ggvenn(list(   \"ER breast cancer\" = GDA_ERBC$gene_symbol,   \"Total proteome\" = total_FC$SYMBOL2,   \"Phosphoproteome\" = phospho_FC$SYMBOL2),   fill_color = c(\"#440154\", \"#21908C\", \"#FDE725\"),   show_percentage = FALSE, text_size = 5) + ggtitle(\"MCF-7 enrichment\") + theme(   plot.title.position = \"plot\",   plot.title = element_text(hjust = 0.5)) ggvenn(list(   \"Hypertension\" = GDA_HT$gene_symbol,   \"Total proteome\" = total_FC$SYMBOL2,   \"Phosphoproteome\" = phospho_FC$SYMBOL2),   fill_color = c(\"#440154\", \"#21908C\", \"#FDE725\"),   show_percentage = FALSE, text_size = 5) + ggtitle(\"MCF-7 enrichment\") + theme(   plot.title.position = \"plot\",   plot.title = element_text(hjust = 0.5)) ggvenn(list(   \"Ovarian cancer\" = GDA_OvCa$gene_symbol,   \"Total proteome\" = total_FC$SYMBOL2,   \"Phosphoproteome\" = phospho_FC$SYMBOL2),   fill_color = c(\"#440154\", \"#21908C\", \"#FDE725\"),   show_percentage = FALSE, text_size = 5) + ggtitle(\"MCF-7 enrichment\") + theme(   plot.title.position = \"plot\",   plot.title = element_text(hjust = 0.5)) # Print the list of proteins in each intersection cat(paste(\"**ER breast cancer/Phospho:** \", paste(sort(intersect(GDA_ERBC$gene_symbol, phospho_FC$SYMBOL2)), collapse = \", \"))) cat(paste(\"**ER breast cancer/Total:** \", paste(sort(intersect(GDA_ERBC$gene_symbol, total_FC$SYMBOL2)), collapse = \", \"))) cat(paste(\"**Total/Phospho:** \", paste(sort(intersect(total_FC$SYMBOL2, phospho_FC$SYMBOL2)), collapse = \", \"))) cat(paste(\"**ER breast cancer/Phospho/Total:** \", paste(sort(intersect(intersect(GDA_ERBC$gene_symbol, phospho_FC$SYMBOL2), total_FC$SYMBOL2)), collapse = \", \"))) cat(paste(\"**Hypertension/Phospho:** \", paste(sort(intersect(GDA_HT$gene_symbol, phospho_FC$SYMBOL2)), collapse = \", \"))) cat(paste(\"**Hypertension/Total:** \", paste(sort(intersect(GDA_HT$gene_symbol, total_FC$SYMBOL2)), collapse = \", \"))) cat(paste(\"**Total/Phospho:** \", paste(sort(intersect(total_FC$SYMBOL2, phospho_FC$SYMBOL2)), collapse = \", \"))) cat(paste(\"**Hypertension/Phospho/Total:** \", paste(sort(intersect(intersect(GDA_HT$gene_symbol, phospho_FC$SYMBOL2), total_FC$SYMBOL2)), collapse = \", \"))) cat(paste(\"**Ovarian cancer/Phospho:** \", paste(sort(intersect(GDA_OvCa$gene_symbol, phospho_FC$SYMBOL2)), collapse = \", \"))) cat(paste(\"**Ovarian cancer/Total:** \", paste(sort(intersect(GDA_OvCa$gene_symbol, total_FC$SYMBOL2)), collapse = \", \"))) cat(paste(\"**Total/Phospho:** \", paste(sort(intersect(total_FC$SYMBOL2, phospho_FC$SYMBOL2)), collapse = \", \"))) cat(paste(\"**Ovarian cancer/Phospho/Total:** \", paste(sort(intersect(intersect(GDA_OvCa$gene_symbol, phospho_FC$SYMBOL2), total_FC$SYMBOL2)), collapse = \", \"))) # Clearing large variables rm(GDA_ERBC, GDA_HT, GDA_OvCa)"},{"path":"https://zoe-schaefer.github.io/MPOInt/articles/MCF7_case.html","id":"epigenetic-network","dir":"Articles","previous_headings":"","what":"5. Epigenetic network","title":"MCF7 case","text":"section develops network visualization epigenetic interactions defined EpiFactors (https://epifactors.autosome.org/). Increased dataset size may make networks difficult visualize, interactive network drawn Python rendered embedded HTML file. data(genes) call imports .csv file included MPOInt package, can replaced update change database downloading importing “Table proteins” file EpiFactors website.   alternative visualization shows members identified complexes without connections.","code":"data(genes) total_join <- inner_join(genes, dplyr::select(MCF7_total_sig, \"log2(FC)\", \"P value\", \"SYMBOL2\"), by = join_by(\"HGNC approved symbol\" == \"SYMBOL2\"), multiple = \"any\") %>%    mutate(\"Source\" = \"Total\")  phospho_join <- inner_join(genes, dplyr::select(MCF7_phospho_sig, \"log2(FC)\", \"P value\", \"SYMBOL2\"), by = join_by(\"HGNC approved symbol\" == \"SYMBOL2\"), multiple = \"any\") %>%    mutate(\"Source\" = \"Phospho\")  joined_data <- full_join(total_join, phospho_join) #> Joining with `by = join_by(`HGNC approved symbol`, `UniProt ID (human)`, #> Function, Modification, `Protein complex`, `Target entity`, Product, #> `log2(FC)`, `P value`, Source)`  # Assigning differential expression identifiers joined_data$Diff <- case_when(joined_data$`log2(FC)` > 0 ~ \"Up\",                              joined_data$`log2(FC)` < 0 ~ \"Down\") # Plotting all relevant proteins from the two combined datasets ggplot(joined_data, aes(x = `log2(FC)`, y = -log10(`P value`))) +   geom_point(aes(color = Source)) +   geom_vline(xintercept = c(total_FC_threshold, -total_FC_threshold),              alpha = 0.5, linetype = \"dashed\") +   geom_hline(yintercept = -log10(total_p_threshold),              alpha = 0.5, linetype = \"dashed\") +   labs(x = \"log2(Fold Change)\", y = \"-log10(P value)\",        title = \"Combined data\") +   geom_text_repel(aes(label = `HGNC approved symbol`), show.legend = FALSE,                   size = rel(3), max.overlaps = 20) +   theme(legend.position = \"bottom\") #> Warning: ggrepel: 153 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps # Formatting histone targets targets <- str_replace_all(str_flatten_comma(str_unique(c(joined_data$Product, joined_data$`Target entity`))), \", \", \"|\")  # Filter by that list total_histone_int <- filter(histone_single_p, grepl(targets, PTM)) total_histone_int$Diff <- case_when(total_histone_int$`log2(FC)` > 0 ~ \"Up\",                              total_histone_int$`log2(FC)` < 0 ~ \"Down\",                              .default = \"0\") total_histone_int <- filter(total_histone_int, !grepl(\"unmod\", PTM))  # Making sure that no histone data has gotten lost in processing -  # this should match the figure from the earlier section ggplot(total_histone_int, aes(x = `log2(FC)`, y = -log10(`P value`))) +   geom_point() +   geom_vline(xintercept = c(total_FC_threshold, -total_FC_threshold),              alpha = 0.5, linetype = \"dashed\") +   geom_hline(yintercept = -log10(total_p_threshold),              alpha = 0.5, linetype = \"dashed\") +   labs(x = \"log2(Fold Change)\", y = \"-log10(P value)\",        title = \"Included histone PTMs\") +   geom_text_repel(aes(label = PTM), show.legend = FALSE, size = rel(3)) +   theme(legend.position = \"bottom\") # Pivoting and formatting the gene list genes_pivoted <- dplyr::select(genes, c(\"HGNC approved symbol\", \"Protein complex\", \"Target entity\", \"Product\")) %>% dplyr::rename(\"Symbol\" = \"HGNC approved symbol\", \"Complex\" = \"Protein complex\", \"Target\" = \"Target entity\", \"Product\" = \"Product\")  genes_pivoted <- genes_pivoted %>%    separate_wider_delim(cols = c(\"Complex\", \"Target\", \"Product\"), delim = \", \",                        names_sep = \"_\", too_few = \"align_start\")  genes_pivoted <- genes_pivoted %>%    pivot_longer(cols = dplyr::starts_with(\"Complex\"), names_to = NULL,                values_to = \"Complex\", values_drop_na = TRUE) %>%    pivot_longer(cols = dplyr::starts_with(\"Target\"), names_to = NULL,                values_to = \"Target\", values_drop_na = TRUE) %>%    pivot_longer(cols = dplyr::starts_with(\"Product\"), names_to = NULL,                values_to = \"Product\", values_drop_na = TRUE)   genes_data_joined <- inner_join(genes_pivoted,                                 dplyr::select(joined_data, c(\"HGNC approved symbol\",                                                       \"log2(FC)\", \"P value\", \"Source\")),                                 by = join_by(\"Symbol\" == \"HGNC approved symbol\"),                                 relationship = \"many-to-many\") # Getting the lists into the right format for the igraph visualization genes_histone_pivoted <- pivot_longer(genes_data_joined, cols = c(\"Target\", \"Product\"), names_to = NULL,              values_to = \"PTM\") %>% distinct() genes_histone_pivoted$Diff <- case_when(genes_histone_pivoted$`log2(FC)` > 0 ~ \"Up\",                              genes_histone_pivoted$`log2(FC)` < 0 ~ \"Down\",                              .default = \"0\")  genes_histone_joined <- right_join(genes_histone_pivoted,                                 dplyr::select(total_histone_int, c(\"PTM\",                                                       \"log2(FC)\", \"P value\", \"Diff\")),                                 by = c(\"PTM\" = \"PTM\"), suffix = c(\"_gene\", \"_hist\"),                                 relationship = \"many-to-many\"                                 ) genes_histone_joined <- relocate(genes_histone_joined, Complex, .after = PTM)  # Ensuring no NA values remain, replacing \"#\" with a clearer identifier genes_histone_joined[genes_histone_joined == \"#\"] <- \"No ID\" genes_histone_joined$Complex <- genes_histone_joined$Complex %>%  replace_na(\"No ID\") # Generating a dataframe for edges and a dataframe for unique vertices with metadata complexes <- unique(genes_histone_joined$Complex) n_complexes <- seq(1, length(complexes)) complex_df <- data.frame(complexes, n_complexes)  # Ensuring all histone PTMs have the same complex and source labels histone_df <- dplyr::select(total_histone_int, c(\"PTM\", \"Diff\")) histone_df$Symbol <- histone_df$PTM histone_df$Complex <- \"No ID\" histone_df$Source <- \"Histone\"  vertices_df <- bind_rows(histone_df, dplyr::select(genes_histone_pivoted, !c(\"log2(FC)\", \"P value\"))) %>% relocate(\"Symbol\") vertices_df <- filter(vertices_df, grepl(\"^H\", PTM)) vertices_df$Complex <- case_when(vertices_df$Complex == \"#\" ~ \"No ID\",                             .default = vertices_df$Complex)  # Creating a dataframe connecting edges (source and target vertices) complex_vertices <- data.frame(vertices = c(unique(genes_histone_joined$Symbol), unique(genes_histone_joined$PTM))) edges_df <- full_join(genes_histone_joined, complex_df, by = join_by(\"Complex\" == \"complexes\")) %>% relocate(c(\"Symbol\", \"PTM\")) edges_df <- left_join(complex_vertices, edges_df, by = join_by(\"vertices\" == \"Symbol\")) %>% dplyr::rename(\"Symbol\" = \"vertices\")  edges_df$Symbol <- case_when(is.na(edges_df$Symbol) ~ edges_df$PTM,                                .default = edges_df$Symbol) edges_df$PTM <- case_when(is.na(edges_df$PTM) ~ edges_df$Symbol,                                .default = edges_df$PTM) edges_df$Source <- case_when(is.na(edges_df$Source) ~ \"Histone\",                                .default = edges_df$Source) edges_df$Complex <- case_when(is.na(edges_df$Complex) ~ \"No ID\",                                .default = edges_df$Complex) edges_df$Diff <- case_when(edges_df$Source == \"Histone\" ~ edges_df$Diff_hist,                              .default = edges_df$Diff_gene) edges_df <- drop_na(edges_df, Diff) sig_network <- distinct(group_by(filter(edges_df, Complex != \"No ID\"), Complex), Symbol, .keep_all = TRUE) sig_network[\"weight\"] <- 1 sig_network$Complex <- factor(sig_network$Complex, levels = unique(as.character(sig_network$Complex)))  ggplot(sig_network, aes(x = Complex, y = Symbol, fill = PTM)) +   geom_bin_2d(binwidth = 1, center = 0) +   theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1),         axis.title.x = element_blank(), axis.title.y = element_blank()) +   scale_fill_viridis_d() +   scale_y_discrete(limits = rev) +   labs(title = \"Network bins\")"},{"path":"https://zoe-schaefer.github.io/MPOInt/articles/MCF7_case.html","id":"complex-and-member-identification","dir":"Articles","previous_headings":"5. Epigenetic network","what":"5.1 Complex and member identification","title":"MCF7 case","text":"future research use, generate multiple tables containing identified complexes, members, common targets, identified PTMs. Networked Complexes: B-WICH, BAF, bBAF, BCOR, BHC, CAF-1, CHD8, COMPASS-like MLL1,2, COMPASS-like MLL3,4, core HDAC, CREST-BRG1, eNoSc, HBO1, LSD-CoREST, MLL-HCF, MLL2/3, MLL4/WBP7, MOZ/MORF, mSin3A, mSin3A-like complex, nBAF, npBAF, NSL, NuA4, NuA4-related complex, NuRD, NuRF, PBAF, Piccolo_NuA4, PRC1, PRC2, RING2-FBRS, RING2-L3MBTL2, SAGA, SCL, SRCAP, STAGA, SWI/SNF BRM-BRG1, SWI/SNF_Brg1(), SWI/SNF_Brg1(II), SWI/SNF_Brm, SWI/SNF-like EPAFB, SWI/SNF-like_EPAFa, SWR, WINAC","code":"# Identified complexes final_complexes <- filter(vertices_df, vertices_df$Source != \"Histone\") %>% filter(Complex != \"No ID\") %>% drop_na() %>% distinct() final_complex_list <- sort(unique(final_complexes$Complex))  cat(paste(\"**Networked Complexes:** \", paste(final_complex_list, collapse = \", \"))) # List members of each final_members <- data.frame(\"Complex\" = \"\", \"Members\" = \"\", \"PTMs\" = \"\")  for (complex in final_complex_list) {   member_df <- filter(final_complexes, final_complexes$Complex == complex)   member_list <- paste0(unique(member_df$Symbol), collapse = \", \")   member_PTMs <- paste0(unique(member_df$PTM), collapse = \", \")   final_members <- final_members %>% add_row(\"Complex\" = complex, \"Members\" = member_list, \"PTMs\" = member_PTMs) }  knitr::kable(final_members) # Differential PTMs final_PTMs <- distinct(final_complexes, pick(PTM, Diff)) %>% dplyr::rename(\"Differential expression\" = \"Diff\") knitr::kable(final_PTMs) # Genes final_proteins <- unique(final_complexes$Symbol) final_func <- filter(genes, genes$`HGNC approved symbol` %in% final_proteins) %>% dplyr::select(!c(\"UniProt ID (human)\")) knitr::kable(final_func)"},{"path":"https://zoe-schaefer.github.io/MPOInt/articles/MCF7_case.html","id":"python-visualization","dir":"Articles","previous_headings":"5. Epigenetic network","what":"5.2 Python visualization","title":"MCF7 case","text":"Finally, create interactive network using Python via reticulate package. allows dynamic visualization can refined filtered generate different views.","code":"vertices_df$Shapes <- case_when(vertices_df$Diff == \"Up\" ~ \"triangle\",                              vertices_df$Diff == \"Down\" ~ \"triangleDown\",                           vertices_df$Diff == \"0\" ~ \"ellipse\") vertices_df$Colors <- case_when(vertices_df$Source == \"Total\" ~ \"red\",                           vertices_df$Source == \"Phospho\" ~ \"blue\",                           vertices_df$Source == \"Histone\" ~ \"gray\")  sig_network_py <- filter(vertices_df, Complex != \"No ID\" | Source == \"Histone\") %>% r_to_py()  edges_py <- filter(edges_df, Complex != \"No ID\" | Source == \"Histone\") %>% r_to_py() import pandas as pd, networkx as nx from pyvis.network import Network # Create NetworkX graph object G = nx.Graph()  # Generate a nested dictionary/tuple with the node of interest (\"Symbol\") and  # the relevant attributes (shape and complex) node_list = [] for i, row in r.sig_network_py.iterrows():   node_list.append((row[\"Symbol\"], {\"color\": row.Colors, \"Complex\": row.Complex, \"shape\": row.Shapes})) G.add_nodes_from(node_list)  # Generate a tuple for edges connecting proteins with PTMs edge_tup = [] for i in range(len(r.edges_py[\"Symbol\"])):   edge_tup.append((r.edges_py[\"Symbol\"][i], r.edges_py[\"PTM\"][i])) G.add_edges_from(edge_tup)  # Remove self-loops G.remove_edges_from(nx.selfloop_edges(G))  # Now remove nodes without edges lone_nodes = [node for node, degree in G.degree() if degree == 0] G.remove_nodes_from(lone_nodes) # To change the parameters of what's being graphed, adjust the initial call to Network() net = Network(height=\"900px\", notebook = True, select_menu = True, cdn_resources = \"in_line\") net.from_nx(G) net.save_graph(\"networkx-pyvis-MCF.html\") htmltools::renderDocument(htmltools::htmlTemplate(\"networkx-pyvis-MCF.html\"))"},{"path":"https://zoe-schaefer.github.io/MPOInt/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Zoe Schaefer. Author, maintainer.","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schaefer Z (2025). MPOInt: Multi-Level Proteomics Integration. R package version 0.0.0.9000, https://github.com/zoe-schaefer/MPOInt.","code":"@Manual{,   title = {MPOInt: Multi-Level Proteomics Integration},   author = {Zoe Schaefer},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://github.com/zoe-schaefer/MPOInt}, }"},{"path":"https://zoe-schaefer.github.io/MPOInt/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Multi-Level Proteomics Integration","text":"can install development version MPOInt GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"zoe-schaefer/MPOInt\")"},{"path":"https://zoe-schaefer.github.io/MPOInt/index.html","id":"articles","dir":"","previous_headings":"","what":"Articles","title":"Multi-Level Proteomics Integration","text":"View two cases explored publication Articles section.","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/index.html","id":"citing-mpoint","dir":"","previous_headings":"","what":"Citing MPOInt","title":"Multi-Level Proteomics Integration","text":"TBA","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/MCF7_histones.html","id":null,"dir":"Reference","previous_headings":"","what":"MCF-7 histone proteome dataset. — MCF7_histones","title":"MCF-7 histone proteome dataset. — MCF7_histones","text":"Histone proteome data Garcia et al. (2013).","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/MCF7_histones.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MCF-7 histone proteome dataset. — MCF7_histones","text":"","code":"MCF7_histones"},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/MCF7_histones.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"MCF-7 histone proteome dataset. — MCF7_histones","text":"data frame 37 rows 12 variables: PTM PTM descriptions. MCF7 std Standard deviation MCF-7 cells. MCF7 ave (5 reps) Average expression MCF-7 cells. 293 ave (5 reps) Average expression HEK293 cells. HaCAT ave (5 reps) Average expression HaCAT cells. hESC ave (6 reps) Average expression hESC cells. HFF ave (7 reps) Average expression HFF cells. Mdm13 ave (5 reps) Average expression Mdm13 cells. ctrl ave Average expression control cell types (HEK293, HaCAT, hESC, HFF, Mdm13). log2(FC) log2 transformed fold change expression MCF-7 control cells. T score calculated T score using standard deviation. P value corresponding P value.","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/MCF7_histones.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"MCF-7 histone proteome dataset. — MCF7_histones","text":"https://doi.org/10.1186/1756-8935-6-20","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/MCF7_phospho.html","id":null,"dir":"Reference","previous_headings":"","what":"MCF-7 phosphoproteome dataset. — MCF7_phospho","title":"MCF-7 phosphoproteome dataset. — MCF7_phospho","text":"Phosphoproteome data Yang et al. (2024). M90 condition: MCF-7 cells grown 90 Pa matrix. F condition (control): MCF-7 cells grown flat culture surface.","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/MCF7_phospho.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MCF-7 phosphoproteome dataset. — MCF7_phospho","text":"","code":"MCF7_phospho"},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/MCF7_phospho.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"MCF-7 phosphoproteome dataset. — MCF7_phospho","text":"data frame 4,172 rows 13 variables: Accession UniProt accession numbers. Position Amino acid number localization. Amino acid Amino acid position. Protein description Description identified protein. Localization probility Localization probability specific residues. F1 Raw data F1 condition. F2 Raw data F2 condition. F3 Raw data F3 condition. M10501 Raw data M1050-1 condition. M10502 Raw data M1050-2 condition. M10503 Raw data M1050-3 condition. M4501 Raw data M450-1 condition. M4502 Raw data M450-2 condition. M4503 Raw data M450-3 condition. M901 Raw data M90-1 condition. M902 Raw data M90-2 condition. M903 Raw data M90-3 condition. P value Anova Calculated unadjusted P value fold change M90/F cells. M1050/F Ratio Raw ratio M1050/F fold change calculation. M1050/F P value P value M1050/F fold change calculation. M450/F Ratio Raw ratio M450/F fold change calculation. M450/F P value P value M450/F fold change calculation. M90/F Ratio Raw ratio M90/F fold change calculation. P value P value M90/F fold change calculation. M1050/M450 Ratio Raw ratio M1050/M450 fold change calculation. M1050/M450 P value P value M1050/M450 fold change calculation. log2(FC) log2 transformed fold change M90/F cells. ENTREZID ENTREZ ID pathway analysis. SYMBOL2 Common gene symbols.","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/MCF7_phospho.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"MCF-7 phosphoproteome dataset. — MCF7_phospho","text":"https://doi.org/10.1021/acs.jproteome.4c00563","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/MCF7_total.html","id":null,"dir":"Reference","previous_headings":"","what":"MCF-7 total proteome dataset. — MCF7_total","title":"MCF-7 total proteome dataset. — MCF7_total","text":"Total proteome data Yang et al. (2024). M90 condition: MCF-7 cells grown 90 Pa matrix. F condition (control): MCF-7 cells grown flat culture surface.","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/MCF7_total.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MCF-7 total proteome dataset. — MCF7_total","text":"","code":"MCF7_total"},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/MCF7_total.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"MCF-7 total proteome dataset. — MCF7_total","text":"data frame 8,317 rows 6 variables: Accession UniProt accession numbers. M90/F Ratio Raw ratio fold change calculation. log2(FC) log2 transformed fold change M90/F cells. P value Calculated unadjusted P value. ENTREZID ENTREZ ID pathway analysis. SYMBOL2 Common gene symbols.","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/MCF7_total.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"MCF-7 total proteome dataset. — MCF7_total","text":"https://doi.org/10.1021/acs.jproteome.4c00563","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/THP1_histones.html","id":null,"dir":"Reference","previous_headings":"","what":"THP-1 histone proteome dataset. — THP1_histones","title":"THP-1 histone proteome dataset. — THP1_histones","text":"Histone proteome data Schaefer et al. (2024). Infected condition: THP-1 macrophages exposed M. bovis BCG 24 hours multiplicity 4.","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/THP1_histones.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"THP-1 histone proteome dataset. — THP1_histones","text":"","code":"THP1_histones"},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/THP1_histones.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"THP-1 histone proteome dataset. — THP1_histones","text":"data frame 215 rows 11 variables: PTM PTM descriptions. C1 C1 peptide abundances. I1 I1 peptide abundances. C2 C2 peptide abundances. I2 I2 peptide abundances. C3 C3 peptide abundances. I3 I3 peptide abundances. C4 C4 peptide abundances. I4 I4 peptide abundances. C5 C5 peptide abundances. I5 I5 peptide abundances.","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/THP1_histones.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"THP-1 histone proteome dataset. — THP1_histones","text":"https://doi.org/10.1016/j.mcpro.2024.100851","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/THP1_phospho.html","id":null,"dir":"Reference","previous_headings":"","what":"THP-1 phosphoproteome dataset. — THP1_phospho","title":"THP-1 phosphoproteome dataset. — THP1_phospho","text":"Phosphoproteome data Agarwal et al. (2021). Infected condition: THP-1 macrophages exposed M. bovis BCG 48 hours multiplicity 10.","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/THP1_phospho.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"THP-1 phosphoproteome dataset. — THP1_phospho","text":"","code":"THP1_phospho"},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/THP1_phospho.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"THP-1 phosphoproteome dataset. — THP1_phospho","text":"data frame 6,121 rows 4 variables: log2(FC) log2 transformed fold change infected/control cells. P value Calculated unadjusted P value. ENTREZID ENTREZ ID pathway analysis. SYMBOL2 Common gene symbols. UNIPROT UNIPROT IDs identified proteins.","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/THP1_phospho.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"THP-1 phosphoproteome dataset. — THP1_phospho","text":"https://doi.org/10.1021/acs.jproteome.9b00895","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/THP1_total.html","id":null,"dir":"Reference","previous_headings":"","what":"THP-1 total proteome dataset. — THP1_total","title":"THP-1 total proteome dataset. — THP1_total","text":"Total proteome data Schaefer et al. (2024). Infected condition: THP-1 macrophages exposed M. bovis BCG 24 hours multiplicity 4.","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/THP1_total.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"THP-1 total proteome dataset. — THP1_total","text":"","code":"THP1_total"},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/THP1_total.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"THP-1 total proteome dataset. — THP1_total","text":"data frame 4,252 rows 11 variables: Accession UniProt accession numbers. Abundance Ratio (log2): (JMI) / (Control) log2 transformed fold change infected/control cells. Abundance Ratio Adj. P-Value: (JMI) / (Control) Calculated adjusted P value. Found Sample: F1: Sample Control Peak detection protein sample F1. Found Sample: F2: Sample Control Peak detection protein sample F2. Found Sample: F3: Sample Control Peak detection protein sample F3. Found Sample: F4: Sample JMI Peak detection protein sample F4. Found Sample: F5: Sample JMI Peak detection protein sample F5. Found Sample: F6: Sample JMI Peak detection protein sample F6. Found Sample: F7: Sample JMI Peak detection protein sample F7. Found Sample: F8: Sample JMI Peak detection protein sample F8.","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/THP1_total.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"THP-1 total proteome dataset. — THP1_total","text":"https://doi.org/10.1016/j.mcpro.2024.100851","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/genes.html","id":null,"dir":"Reference","previous_headings":"","what":"EpiFactors gene set. — genes","title":"EpiFactors gene set. — genes","text":"Exported information EpiFactors database epigenetic actors, complexes, targets.","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EpiFactors gene set. — genes","text":"","code":"genes"},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/genes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"EpiFactors gene set. — genes","text":"data frame 801 rows 7 variables: HGNC approved symbol Common symbols member. UniProt ID (human) Corresponding UniProt IDs. Function Assigned function. Modification Resulting modification. Protein complex Complex(es) effector member. Target entity Modification residue targeted complex. Product Resulting modification residue.","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/genes.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"EpiFactors gene set. — genes","text":"https://doi.org/10.1093/nar/gkac989","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/volcano_epi.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a volcano plot for epiproteome data. — volcano_epi","title":"Generate a volcano plot for epiproteome data. — volcano_epi","text":"volcano_epi generates volcano plot given data threshold values.","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/volcano_epi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a volcano plot for epiproteome data. — volcano_epi","text":"","code":"volcano_epi(df, fc_col, p_col, fc_thr = 0.5, p_thr = 0.05, label_col = NA, ...)"},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/volcano_epi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a volcano plot for epiproteome data. — volcano_epi","text":"df data frame containing points plotted. fc_col column df fold change values plotted. p_col column df P-values plotted. values log-transformed. fc_thr scalar value indicating fold change threshold. Default = 0.5. p_thr scalar value indicating P-value threshold. Default = 0.05. label_col column df points labeled. label_col = NA, default labels applied significant points. ... Optional.","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/volcano_epi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a volcano plot for epiproteome data. — volcano_epi","text":"ggplot2 object.","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/volcano_epi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a volcano plot for epiproteome data. — volcano_epi","text":"","code":"if (FALSE) { # \\dontrun{ volcano_epi(df = total_raw, fc_col = \"FC\", p_col = \"Pval\", label_col = \"SYMBOL2\") + ggtitle(\"Volcano plot\") + xlab(\"log2FC\") + ylab(\"-log10P\") } # }"},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/volcano_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a volcano plot with groups of interest. — volcano_groups","title":"Generate a volcano plot with groups of interest. — volcano_groups","text":"volcano_groups generates volcano plot given data, threshold values, subset points label.","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/volcano_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a volcano plot with groups of interest. — volcano_groups","text":"","code":"volcano_groups(   df,   fc_col,   p_col,   fc_thr = 0.5,   p_thr = 0.05,   label_col = NA,   compute_fc_log2 = FALSE,   group_list = NULL,   ... )"},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/volcano_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a volcano plot with groups of interest. — volcano_groups","text":"df data frame containing points plotted. fc_col column df fold change values plotted. p_col column df P-values plotted. values log-transformed. fc_thr scalar value indicating fold change threshold. Default = 0.5. p_thr scalar value indicating P-value threshold. Default = 0.05. label_col column df values used groups provided. compute_fc_log2 Boolean determine fc_col values additionally log2-transformed. Default = FALSE. group_list named list lists list group peptides, labeled group name. ... Optional.","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/volcano_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a volcano plot with groups of interest. — volcano_groups","text":"ggplot2 object.","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/volcano_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a volcano plot with groups of interest. — volcano_groups","text":"","code":"if (FALSE) { # \\dontrun{ volcano_groups(df = THP1_total, fc_col = \"log2(FC)\", p_col = \"P value\",   label_col = \"SYMBOL2\", group_list = list(\"Group 1\" =    c(\"MORF4L1\", \"SAMSN1\", \"DTX3L\", \"MBD3\",  \"HSF1\",   \"EYA3\", \"NCAPD2\", \"TAF9\", \"PPP4C\", \"ZNF638\"),   \"Group 2\" = c(\"CD9\", \"CD82\", \"NFKB1\", \"BST2\", \"CTSH\"))) +   ggtitle(\"Grouped volcano plot\") +   xlab(\"log2FC\") + ylab(\"-log10P\") } # }"},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/volcanoplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a volcano plot. — volcanoplot","title":"Generate a volcano plot. — volcanoplot","text":"volcanoplot generates volcano plot given data, threshold values, subset points label.","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/volcanoplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a volcano plot. — volcanoplot","text":"","code":"volcanoplot(   df,   fc_col,   p_col,   fc_thr = 0.5,   p_thr = 0.05,   label_col = NA,   compute_fc_log2 = FALSE,   ... )"},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/volcanoplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a volcano plot. — volcanoplot","text":"df data frame containing points plotted. fc_col column df fold change values plotted. p_col column df P-values plotted. values log-transformed. fc_thr scalar value indicating fold change threshold. Default = 0.5. p_thr scalar value indicating P-value threshold. Default = 0.05. label_col column df points labeled. label_col = NA, default labels applied significant points. compute_fc_log2 Boolean determine fc_col values additionally log2-transformed. Default = FALSE. ... Optional.","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/volcanoplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a volcano plot. — volcanoplot","text":"ggplot2 object.","code":""},{"path":"https://zoe-schaefer.github.io/MPOInt/reference/volcanoplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a volcano plot. — volcanoplot","text":"","code":"if (FALSE) { # \\dontrun{ volcanoplot(df = total_raw, fc_col = \"FC\", p_col = \"Pval\", label_col = \"SYMBOL2\") + ggtitle(\"Volcano plot\") + xlab(\"log2FC\") + ylab(\"-log10P\") } # }"}]
